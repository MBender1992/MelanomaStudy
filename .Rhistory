# plot important features
# ggplot(data = feat.freq.miRNA, aes(coef, freq, fill = ifelse(freq > 0.5, "red", "blue"))) +
#   geom_bar(stat = "identity",  color = "black") +
#   coord_flip() +
#   xlab("") +
#   ylab("fraction of cv-models using this feature (relative feature importance)") +
#   theme_bw() +
#   scale_y_continuous(limits = c(0,1), breaks = seq(0,1,0.2), expand = c(0,0), labels = scales::percent_format()) +
#   geom_hline(yintercept = 0.5, lty = 2, color = "red") +
#   scale_fill_manual(labels = c("< 50 %", "> 50 %"), values = c("gray95", "lightblue")) +
#   labs(fill = "frequency")
#####################################
##
## c.4b relaxed LASSO miRNA
##
#####################################
feat.relaxed.miRNA <-  feat.freq.miRNA[feat.freq.miRNA$freq > 0.5,]
# models.lasso.relaxed.miRNA <- lassoEval("relaxedLassomiRNA", dat_log, rep = 10, k = 10)
#saveRDS(models.lasso.relaxed.miRNA, "models/models_lasso_relaxed_miRNA.rds")
models.lasso.relaxed.miRNA <- readRDS("models/models_lasso_relaxed_miRNA.rds")
# set names of list elements
models.lasso.relaxed.miRNA <- setNames(lapply(models.lasso.relaxed.miRNA, setNames, folds), reps)
## confidence interval for the cv.train folds in the inner loop
ci.relaxed.miRNA <- rbind.model.ci(models.lasso.relaxed.miRNA)
# extract important coefficients
extract.coefs.relaxed.miRNA <- extractCoefs(models.lasso.relaxed.miRNA) %>% do.call(rbind,.) %>% table()
# calculate percentages
feat.freq.relaxed.miRNA <- data.frame(sort(extract.coefs.relaxed.miRNA/100)) %>%
setNames(c("coef", "freq"))
test <- rbind(complete = ci.complete,
relaxedLasso = ci.relaxedLasso,
baseline = ci.baseline,
signif = ci.signif,
miRNA = ci.miRNA,
relaxedmiRNA = ci.relaxed.miRNA) %>%
rownames_to_column("tmp") %>%
separate(tmp,c("model", "results"), extra = "merge") %>%
mutate(model = factor(model),
model = reorder(model, mean))
test
ggplot(test, aes(x=model, y=mean)) +
geom_errorbar(aes(ymin=lower, ymax=upper)) + facet_wrap(~results) + coord_flip() + theme_bw()
ggplot(test, aes(x=model, y=mean)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper)) + facet_wrap(~results) + coord_flip() + theme_bw()
ggplot(test, aes(x=model, y=mean)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2) + facet_wrap(~results) + coord_flip() + theme_bw()
ggplot(test, aes(x=model, y=mean), position = position_dodge(0.5)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2) + facet_wrap(~results) + coord_flip() + theme_bw()
ggplot(test, aes(x=model, y=mean), position = position_dodge(0.3)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2) + facet_wrap(~results) + coord_flip() + theme_bw()
ggplot(test, aes(x=model, y=mean), position = position_dodge(0.3)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2) +
facet_wrap(~results) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))
ggplot(test, aes(x=model, y=mean), position = position_dodge(0.3)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2) +
facet_wrap(~results) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
ggplot(test, aes(x=model, y=mean), position = position_dodge(0.3)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2, color ="skyblue") +
facet_wrap(~results) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
ggplot(test, aes(x=model, y=mean), position = position_dodge(0.3)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2) +
facet_wrap(~results) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
dat_compare <- rbind(complete = ci.complete,
relaxedLasso = ci.relaxedLasso,
baseline = ci.baseline,
signif = ci.signif,
miRNA = ci.miRNA,
relaxedmiRNA = ci.relaxed.miRNA) %>%
rownames_to_column("tmp") %>%
separate(tmp,c("model", "results"), extra = "merge") %>%
mutate(model = factor(model),
model = reorder(model, mean))
dat_compare <- rbind(complete = ci.complete,
relaxedLasso = ci.relaxedLasso,
baseline = ci.baseline,
signif = ci.signif,
miRNA = ci.miRNA,
relaxedmiRNA = ci.relaxed.miRNA) %>%
rownames_to_column("tmp") %>%
separate(tmp,c("model", "results"), extra = "merge") %>%
mutate(model = factor(model),
model = reorder(model, mean))
ggplot(dat_compare, aes(x=model, y=mean), position = position_dodge(0.3)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2) +
facet_wrap(~results) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
dat_compare
ggplot(filter(dat_compare, results != "train.inner"), aes(x=model, y=mean), position = position_dodge(0.3)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2) +
facet_wrap(~results) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
ggplot(filter(dat_compare, results != "train.inner"), aes(x=model, y=mean), position = position_dodge(0.3)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
ggplot(filter(dat_compare, results != "train.inner"), aes(x=model, y=mean, color= results), position = position_dodge(0.3)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
ggplot(filter(dat_compare, results != "train.inner"), aes(x=model, y=mean, color= results), position = position_dodge(0.9)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
ggplot(filter(dat_compare, results != "train.inner"), aes(x=model, y=mean, color= results), position = position_dodge()) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
ggplot(filter(dat_compare, results != "train.inner"), aes(x=model, y=mean, fill= results), position = position_dodge()) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
ggplot(filter(dat_compare, results != "train.inner"), aes(x=model, y=mean, color= results), position = position_dodge()) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
ggplot(filter(dat_compare, results != "train.inner"), aes(x=model, y=mean, color= results)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2,position=position_dodge(.9)) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
ggplot(filter(dat_compare, results != "train.inner"), aes(x=model, y=mean, color= results)) +
geom_point(position=position_dodge(.9)) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2,position=position_dodge(.9)) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
ggplot(filter(dat_compare, results != "train.inner"), aes(x=model, y=mean, color= results)) +
geom_point(position=position_dodge(.5)) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2,position=position_dodge(.5)) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
ggplot(filter(dat_compare, results = "train.inner"), aes(x=model, y=mean)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
filter(dat_compare, results = "train.inner")
dat_compare
ggplot(filter(dat_compare, results == "train.inner"), aes(x=model, y=mean)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
ggplot(filter(dat_compare, results != "train.inner"), aes(x=model, y=mean, color= results)) +
geom_point(position=position_dodge(.5)) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2,position=position_dodge(.5)) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
ggplot(filter(dat_compare, results != "train.inner"), aes(x=model, y=mean, color= results)) +
geom_point(position=position_dodge(.5)) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2,position=position_dodge(.5)) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
ggplot(filter(dat_compare, results == "train.inner"), aes(x=model, y=mean)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.3) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
# train inner cv ROC
ggplot(filter(dat_compare, results == "train.inner"), aes(x=model, y=mean)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.3, size = 0.2) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
# train inner cv ROC
ggplot(filter(dat_compare, results == "train.inner"), aes(x=model, y=mean)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.3, size = 1) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
# train inner cv ROC
ggplot(filter(dat_compare, results == "train.inner"), aes(x=model, y=mean)) +
geom_point(size = 2) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.3, size = 1) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
models.lasso.relaxed.miRNA
models.lasso.relaxedLasso
models.lasso.complete
test <- function(dat,metric, element){
ls <- lapply(1:rep, function(split){
do.call(rbind.data.frame, sapply(dat[[split]], '[', element))
})
sapply(ls, "[", metric)
}
test(models.lasso.complete, "train.metrics", "ROC")
test <- function(dat,metric, element){
ls <- lapply(1:rep, function(split){
do.call(rbind.data.frame, sapply(dat[[split]], '[', element))
})
sapply(ls, "[", metric)
}
test(models.lasso.complete, "train.metrics", "ROC")
models.lasso.complete[[1]]
do.call(rbind.data.frame, sapply(models.lasso.complete[[1]], '[', "ROC"))
do.call(rbind.data.frame, sapply(models.lasso.complete[[1]], '[', "Fold10"))
test <- function(data){
lapply(1:10, function(x){
tmp <- sapply(sapply(data[[x]], '[', 'train.metrics'), '[', 'ROC') %>% unlist()
data.frame(coef = tmp)
})
}
test(models.lasso.complete)
test <- function(data){
lapply(1:10, function(x){
tmp <- sapply(sapply(data[[x]], '[', 'train.metrics'), '[', 'lambda') %>% unlist()
data.frame(lambda = tmp)
})
}
test(models.lasso.complete)
test(models.lasso.complete) %>% unlist()
test(models.lasso.complete) %>% unlist() %>% mean()
test(models.lasso.relaxedLasso) %>% unlist() %>% mean()
library(missForest)
library(tidyverse)
library(devtools)
library(caret)
library(doParallel)
library(pROC)
library(pbapply)
# source R functions
source_url("https://raw.githubusercontent.com/MBender1992/base_scripts/Marc/R_functions.R")
calc.model.metrics.2 <- function(x.train, y.train, x.test, y.test, train.method = "glmnet", cv.method = "repeatedcv", number = 10, repeats = 5, metric = "ROC", tuneGrid){
# define ctrl function
cctrl1 <- trainControl(method=cv.method, number=number,repeats = repeats, returnResamp="all",savePredictions = T,
classProbs=TRUE, summaryFunction=twoClassSummary)
# run glmnet model
md <- train(x.train, y.train, method = train.method,preProcess = c("center","scale"),
trControl = cctrl1,metric = metric,tuneGrid = tuneGrid)
# obtain cv AUC of training folds
ci_cv <- ci.cv.AUC.lasso(md)
# train coefs
feat <- coef(md$finalModel, md$finalModel$lambdaOpt)
# obtain index from max metric
opt <- md$results[which(md$results$lambda == md$finalModel$lambdaOpt),]
# predict
pred <- predict(md, x.test, type="raw")
# object to return
res <- list(
predictions = data.frame(pred.ja = predict(md, x.test, type="prob")$ja, obs = y.test),
coefficients = rownames_to_column(data.frame(vals = feat[feat[,1] != 0, 1][-1]),"coefs"),
train.metrics = opt[which(opt$ROC == max(opt$ROC)),],
train.cv = data.frame(cvAUC = ci_cv$cvAUC,
se = ci_cv$se,
lower = ci_cv$ci[1],
upper = ci_cv$ci[2]),
test.metrics = data.frame(AUC = auc(roc(y.test, predict(md, x.test, type="prob")[,1])),
Sens = sensitivity(y.test, pred)  ,
Spec = specificity(y.test, pred))
)
return(res)
}
models.lasso.relaxedLasso.ROC
models.lasso.relaxedLasso.ROC <- lassoEval("relaxedLasso", dat_log, rep = rep, k = k)
saveRDS(models.lasso.relaxedLasso.ROC, "models/models_lasso_relaxedLasso_ROC.rds")
models.lasso.relaxedLasso.ROC
extractPredictions <- function(data){
lapply(1:10, function(x){
tmp <- sapply(data[[x]], '[', 'predictions')
#data.frame(coef = tmp)
tmp
})
}
extractPredictions(models.lasso.relaxedLasso.ROC)
extractPredictions(models.lasso.relaxedLasso.ROC) %>% rbind()
extractPredictions <- function(data){
lapply(1:10, function(x){
tmp <- sapply(data[[x]], '[', 'predictions')
})
}
extractPredictions(models.lasso.relaxedLasso.ROC)
do.call(rbind.data.frame, extractPredictions(models.lasso.relaxedLasso.ROC)
do.call(rbind.data.frame, extractPredictions(models.lasso.relaxedLasso.ROC))
do.call(rbind.data.frame, extractPredictions(models.lasso.relaxedLasso.ROC))
bind_rows( extractPredictions(models.lasso.relaxedLasso.ROC)
bind_rows( extractPredictions(models.lasso.relaxedLasso.ROC))
bind_rows( extractPredictions(models.lasso.relaxedLasso.ROC))
extractPredictions(models.lasso.relaxedLasso.ROC)
extractPredictions <- function(data){
lapply(1:10, function(x){
tmp <- sapply(data[[x]], '[', 'predictions')
data.frame(tmp)
})
}
bind_rows( extractPredictions(models.lasso.relaxedLasso.ROC))
extractPredictions(models.lasso.relaxedLasso.ROC)
models.lasso.relaxedLasso.ROC
extractPredictions <- function(data){
lapply(1:10, function(x){
tmp <- sapply(data[[x]], '[', 'predictions')
})
}
extractPredictions(models.lasso.relaxedLasso.ROC)
extractPredictions <- function(data){
lapply(1:10, function(x){
tmp <- sapply(data[[x]], '[', 'predictions')
as.data.frame(tmp)
})
}
extractPredictions(models.lasso.relaxedLasso.ROC)
extractPredictions(models.lasso.relaxedLasso.ROC)
extractPredictions <- function(data){
lapply(1:10, function(x){
tmp <- sapply(data[[x]], '[', 'predictions')
})
}
extractPredictions(models.lasso.relaxedLasso.ROC)
test <- extractPredictions(models.lasso.relaxedLasso.ROC)
sapply(test, as.data.frame)
test[[10]]
bind_rows(test[[10]])
extractPredictions <- function(data){
lapply(1:10, function(x){
tmp <- sapply(data[[x]], '[', 'predictions')
bind_rows(tmp)
})
}
test <- extractPredictions(models.lasso.relaxedLasso.ROC)
test
bind_rows(test)
roc.test <- bind_rows(test)
plot(roc(roc.test$obs, roc.test$pred.ja))
plot(roc(roc.test$obs, roc.test$pred.ja), print.auc = T)
ci.relaxed.miRNA
ci.relaxedLasso
ci.relaxedLasso
plot(roc(roc.test$obs, roc.test$pred.ja), print.auc = T, print.ci = T)
plot(roc(roc.test$obs, roc.test$pred.ja), print.auc = T, print.auc.ci = T)
plot(roc(roc.test$obs, roc.test$pred.ja), print.auc = T, print.ci.auc = T)
test
data.frame(test)
test
pred
predict(md2, x.test, type="prob")$ja
x.train
ind <- createDataPartition(y, p =.8) %>% .$Resample1
md2 <- train(x.train, y.train, method = "glmnet", metric = "ROC", tuneGrid = expand.grid(alpha = 1, lambda = seq(0.01,0.2,by = 0.01)), preProcess(c("center", "scale")))
md2 <- train(x.train, y.train, method = "glmnet", metric = "ROC", tuneGrid = expand.grid(alpha = 1, lambda = seq(0.01,0.2,by = 0.01)), preProcess= c("center", "scale"))
cctrl1 <- trainControl(method=cv.method, number=number,repeats = repeats, returnResamp="all",savePredictions = T,
classProbs=TRUE, summaryFunction=twoClassSummary)
md2 <- train(x.train, y.train, method = "glmnet",trControl = cctrl1,  metric = "ROC", tuneGrid = expand.grid(alpha = 1, lambda = seq(0.01,0.2,by = 0.01)), preProcess= c("center", "scale"))
pred <- predict(md2, x.test, type="prob")
pred
obs <- y.test
data.frame(pred = pred$ja, obs = obs)
sensitivity(obs, pred)
pred <- predict(md2, x.test, type="raw")
sensitivity(obs, pred)
specificity(obs,pred)
roc(obs, pred)
pred <- predict(md2, x.test, type="prob")
obs <- y.test
roc(obs, pred)
predict(md2, x.test, type="prob")[,1]
roc(y.test, predict(md2, x.test, type="prob")[,1])
set.seed(23)
md2 <- train(x.train, y.train, method = "glmnet",trControl = cctrl1,  metric = "ROC", tuneGrid = expand.grid(alpha = 1, lambda = seq(0.01,0.2,by = 0.01)), preProcess= c("center", "scale"))
pred <- predict(md2, x.test, type="prob")
obs <- y.test
roc(y.test, predict(md2, x.test, type="prob")[,1])
sensitivity(obs,pred)
pred <- predict(md2, x.test, type="raw")
obs <- y.test
sensitivity(obs,pred)
specificity(obs,pred)
pred
predict(md2, x.test, type="prob")
models.lasso.relaxedLasso.ROC
extractSensSpec <- function(data){
lapply(1:10, function(x){
tmp <- sapply(data[[x]], '[', 'Sens')
})
}
extractSensSpec(models.lasso.relaxedLasso.ROC)
models.lasso.relaxedLasso.ROC
extractSensSpec <- function(data){
lapply(1:10, function(x){
tmp <- sapply(data[[x]], '[', 'test.metric')
})
}
extractSensSpec(models.lasso.relaxedLasso.ROCs)
extractSensSpec(models.lasso.relaxedLasso.ROC)
models.lasso.relaxedLasso.ROC
tmp <- sapply(data[[x]], '[', 'test.metrics')
extractSensSpec <- function(data){
lapply(1:10, function(x){
tmp <- sapply(data[[x]], '[', 'test.metrics')
})
}
extractSensSpec(models.lasso.relaxedLasso.ROC)
bind_rows(extractSensSpec(models.lasso.relaxedLasso.ROC))
extractSensSpec(models.lasso.relaxedLasso.ROC)
test<-extractSensSpec(models.lasso.relaxedLasso.ROC)
sapply(test, "[", "Sens")
sapply(test, "[", "test.metrics")
test
extractSensSpec(models.lasso.relaxedLasso.ROC)
extractSensSpec(models.lasso.relaxedLasso.ROC) %>% unlist()
test<-extractSensSpec(models.lasso.relaxedLasso.ROC) %>% unlist()
names(test)
Sens <- names(test) == test.metrics.Sens
Sens <- names(test) == "test.metrics.Sens"
Sens
test[ind.Sens]
ind.Sens <- names(test) == "test.metrics.Sens"
test[ind.Sens]
ind.Spec <- names(test) == "test.metrics.Spec"
test[ind.Spec]
data.frame(TPR = Sens,
FPR = 1-Spec)
ind.Sens <- names(test) == "test.metrics.Sens"
Sens <- test[ind.Sens]
ind.Spec <- names(test) == "test.metrics.Spec"
Spec <- test[ind.Spec]
data.frame(TPR = Sens,
FPR = 1-Spec)
roc <- data.frame(TPR = Sens,
FPR = 1-Spec)
ggplot(roc,aes(FPR,TPR))+geom_line(size = 2, alpha = 0.7)
mean_roc(md2)
install.packages("cutpointr")
library(cutpointr)
mean_roc(md2)
test
pred
pred <- predict(md2, x.test, type="raw")
obs <- y.test
pred
obs
pred <- predict(md2, x.test, type="prob")
obs <- y.test
mean_roc <- function(data, cutoffs = seq(from = 0, to = 1, by = 0.1)) {
map_df(cutoffs, function(cp) {
out <- cutpointr(data = data, x = pred, class = obs,
subgroup = Sample, method = oc_manual, cutpoint = cp,
pos_class = "neg", direction = ">=")
data.frame(cutoff = cp,
sensitivity = mean(out$sensitivity),
specificity = mean(out$specificity))
})
}
mean_roc(md2)
