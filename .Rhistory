#   geom_hline(yintercept = 0.5, lty = 2, color = "red") +
#   scale_fill_manual(labels = c("< 50 %", "> 50 %"), values = c("gray95", "lightblue")) +
#   labs(fill = "frequency")
#####################################
##
## c.3 signif
##
#####################################
#
models.lasso.signif <- lassoEval("signif", dat_log, rep = rep, k = k)
# saveRDS(models.lasso.signif, "models/models_lasso_signif.rds")
# models.lasso.signif <- readRDS("models/models_lasso_signif.rds")
# set names of list elements
models.lasso.signif <- setNames(lapply(models.lasso.signif, setNames, folds), reps)
## confidence interval for the cv.train folds in the inner loop
ci.signif <- rbind.model.ci(models.lasso.signif)
# extract important coefficients
extract.coefs.signif <- extractCoefs(models.lasso.signif) %>% do.call(rbind,.) %>% table()
# calculate percentages
feat.freq <- data.frame(sort(extract.coefs.signif/100)) %>%
setNames(c("coef", "freq"))
# plot important features
# ggplot(data = feat.freq, aes(coef, freq)) +
#   geom_bar(stat = "identity",  color = "black", fill = "lightblue") +
#   coord_flip() +
#   xlab("") +
#   ylab("fraction of cv-models using this feature (relative feature importance)") +
#   theme_bw() +
#   scale_y_continuous(limits = c(0,1), breaks = seq(0,1,0.2), expand = c(0,0), labels = scales::percent_format()) +
#   geom_hline(yintercept = 0.5, lty = 2, color = "red") +
#   labs(fill = "frequency")
#####################################
##
## c.4a miRNA
##
#####################################
#
models.lasso.miRNA <- lassoEval("miRNA", dat_log, rep = 10, k = 10)
# saveRDS(models.lasso.miRNA, "models/models_lasso_miRNA.rds")
# models.lasso.miRNA <- readRDS("models/models_lasso_miRNA.rds")
# set names of list elements
models.lasso.miRNA <- setNames(lapply(models.lasso.miRNA, setNames, folds), reps)
## confidence interval for the cv.train folds in the inner loop
ci.miRNA <- rbind.model.ci(models.lasso.miRNA)
# extract important coefficients
extract.coefs.miRNA <- extractCoefs(models.lasso.miRNA) %>% do.call(rbind,.) %>% table()
# calculate percentages
feat.freq.miRNA <- data.frame(sort(extract.coefs.miRNA/100)) %>%
setNames(c("coef", "freq"))
# plot important features
# ggplot(data = feat.freq.miRNA, aes(coef, freq, fill = ifelse(freq > 0.5, "red", "blue"))) +
#   geom_bar(stat = "identity",  color = "black") +
#   coord_flip() +
#   xlab("") +
#   ylab("fraction of cv-models using this feature (relative feature importance)") +
#   theme_bw() +
#   scale_y_continuous(limits = c(0,1), breaks = seq(0,1,0.2), expand = c(0,0), labels = scales::percent_format()) +
#   geom_hline(yintercept = 0.5, lty = 2, color = "red") +
#   scale_fill_manual(labels = c("< 50 %", "> 50 %"), values = c("gray95", "lightblue")) +
#   labs(fill = "frequency")
#####################################
##
## c.4b relaxed LASSO miRNA
##
#####################################
feat.relaxed.miRNA <-  feat.freq.miRNA[feat.freq.miRNA$freq > 0.5,]
models.lasso.relaxed.miRNA <- lassoEval("relaxedLassomiRNA", dat_log, rep = 10, k = 10)
#saveRDS(models.lasso.relaxed.miRNA, "models/models_lasso_relaxed_miRNA.rds")
# models.lasso.relaxed.miRNA <- readRDS("models/models_lasso_relaxed_miRNA.rds")
# set names of list elements
models.lasso.relaxed.miRNA <- setNames(lapply(models.lasso.relaxed.miRNA, setNames, folds), reps)
## confidence interval for the cv.train folds in the inner loop
ci.relaxed.miRNA <- rbind.model.ci(models.lasso.relaxed.miRNA)
# extract important coefficients
extract.coefs.relaxed.miRNA <- extractCoefs(models.lasso.relaxed.miRNA) %>% do.call(rbind,.) %>% table()
# calculate percentages
feat.freq.relaxed.miRNA <- data.frame(sort(extract.coefs.relaxed.miRNA/100)) %>%
setNames(c("coef", "freq"))
models.lasso.relaxed.miRNA
ci.relaxed.miRNA
feat.freq.relaxed.miRNA
rbind.model.ci(models.lasso.signif)
models.lasso.signif2 <- readRDS("models/models_lasso_signif.rds")
models.lasso.signif2 <- setNames(lapply(models.lasso.signif2, setNames, folds), reps)
## confidence interval for the cv.train folds in the inner loop
ci.signif <- rbind.model.ci(models.lasso.signif2)
ci.signif
models.lasso.baseline
rbind.model.ci(models.lasso.baseline)
feat.relaxed
feat.freq.complete
feat.relaxed
"BRAFpos" %in% "BRAF"
names(dat_log)
names(dat_log) %in% feat.relaxed
names(dat_log) %in% "BRAF"
names(dat_log)
str_detect(names(dat_log), feat.relaxed)
str_detect(names(dat_log), feat.relaxed$coef)
str_detect(names(dat_log), as.character(feat.relaxed$coef))
names(dat_log)
as.character(feat.relaxed$coef)
str_detect(as.character(feat.relaxed$coef), names(dat_log))
iris$Species %like% "virg"
library(stringr)
iris$Species %like% "virg"
library(data.table)
library(data.table)
iris$Species %like% "virg"
names(dat_log)
names(dat_log) %like% "BRAF"
feat.relaxed
names(dat_log) %like% c("BRAF", "Alter")
names(dat_log) %like any% "BRAF"
names(dat_log) %like% "%BRAF%"
%like% "%BRAF%"
names(dat_log)
names(dat_log) %like% "%BR%"
library(DescTools)
names(dat_log) %like any% "%BR%"
feat.relaxed$coef
as.character(feat.relaxed$coef)
names(dat_log) %like any% as.character(feat.relaxed$coef)
as.character(feat.relaxed$coef) %like any% names(dat_log)
feat.relaxed
feat.relaxed[as.character(feat.relaxed$coef) %like any% names(dat_log) ,]
feat.relaxed
names(dat_log) %like any% as.character(feat.relaxed$coef)
str_detect(as.character(feat.relaxed$coef), "BRAF")
str_detect(as.character(feat.relaxed$coef), names(dat_log))
names(dat_log)
str_detect(as.character(feat.relaxed$coef), c("BRAF"))
str_detect(as.character(feat.relaxed$coef), c("BRAF","S100"))
str_detect(as.character(feat.relaxed$coef), c("BRAF|S100"))
names(dat_log)
paste(names(dat_log), sep ="|")
paste(names(dat_log), sep ="|")
paste(names(dat_log))
names(dat_log)
names(dat_log) %>% unlist()
class(names(dat_log))
paste(names(dat_log), collapse = TRUE)
paste(names(dat_log), collapse = "|")
str_detect(as.character(feat.relaxed$coef), paste(names(dat_log), collapse = "|"))
feat.relaxed
model.matrix.subset <- function(model, data){
if(model == "complete"){
mm <- model.matrix(Responder~., data = data)[,-1]
} else if(model == "miRNA"){
mm <- model.matrix(Responder~., data = select(data, c(contains("mir"),Responder)))[,-1]
} else if(model == "baseline"){
mm <- model.matrix(Responder~., data = select(data, contains(c("Eosinophile","LDH","S100","CRP")),Responder))[,-1]
} else if(model == "signif"){
mm <- model.matrix(Responder~., data = select(data, contains(readRDS("significant_features.rds")),Alter,prior_BRAF_therapy,Responder))[,-1]
} else if(model == "relaxedLasso"){
mm <- model.matrix(Responder~., data = select(data, c(feat.relaxed$coef,BRAF, Alter, prior_BRAF_therapy,Responder)))[,-1]
} else if(model == "relaxedLassomiRNA"){
mm <- model.matrix(Responder~., data = select(data, c(feat.relaxed.miRNA$coef,Responder)))[,-1]
} else {
stop("Please specify 1 of the following 4 options:
1. 'baseline' for a base model using conventional serum markers (LDH, CRP, S100, Eosinophile)
2. 'miRNA' for a model using only miRNAs (reduced by lasso to informative features)
3. 'signif' for a model with significantly different features between responders and non-responders
4. 'complete' for a model with all predictors (reduced by lasso)
5. 'relaxedLasso' for a model with the best predictors selected by the 'complete' model (afterwards reduced again with LASSO)
6. 'relaxedLassomiRNA for a model with the best predictors selected by the 'miRNA' model (afterwards reduced again with LASSO")
}
return(mm)
}
feat.relaxed <-  feat.freq.complete[feat.freq.complete$freq > 0.5,]
feat.relaxed <- feat.relaxed[as.character(feat.relaxed$coef) %like any% names(dat_log),]
feat.relaxed
k <- 10
rep <- 10
models.lasso.complete <- lassoEval("complete", dat_log, rep = rep, k = k)
# saveRDS(models.lasso.complete, "models/models_lasso_complete.rds")
# models.lasso.complete <- readRDS("models/models_lasso_complete.rds")
# set names of list elements
models.lasso.complete <- setNames(lapply(models.lasso.complete, setNames, folds), reps)
## confidence interval for the cv.train folds in the inner loop
ci.complete <- rbind.model.ci(models.lasso.complete)
# extract important coefficients
extract.coefs.complete <- extractCoefs(models.lasso.complete) %>% do.call(rbind,.) %>% table()
# calculate percentages
feat.freq.complete <- data.frame(sort(extract.coefs.complete/100)) %>%
setNames(c("coef", "freq"))
# plot important features
# ggplot(data = feat.freq.complete, aes(coef, freq, fill = ifelse(freq > 0.5, "red", "blue"))) +
#   geom_bar(stat = "identity",  color = "black") +
#   coord_flip() +
#   xlab("") +
#   ylab("fraction of cv-models using this feature (relative feature importance)") +
#   theme_bw() +
#   scale_y_continuous(limits = c(0,1), breaks = seq(0,1,0.2), expand = c(0,0), labels = scales::percent_format()) +
#   geom_hline(yintercept = 0.5, lty = 2, color = "red") +
#   scale_fill_manual(labels = c("< 50 %", "> 50 %"), values = c("gray95", "lightblue")) +
#   labs(fill = "frequency")
#####################################
##
## c.1b relaxed LASSO of the complete model
##
#####################################
# obtain features for relaxed LASSO analysis (features with importance > 0.5, BRAF added manually within the function)
feat.relaxed <-  feat.freq.complete[feat.freq.complete$freq > 0.5,]
feat.relaxed <- feat.relaxed[as.character(feat.relaxed$coef) %like any% names(dat_log),]
k <- 10
rep <- 10
models.lasso.complete <- lassoEval("complete", dat_log, rep = rep, k = k)
# saveRDS(models.lasso.complete, "models/models_lasso_complete.rds")
# models.lasso.complete <- readRDS("models/models_lasso_complete.rds")
# set names of list elements
models.lasso.complete <- setNames(lapply(models.lasso.complete, setNames, folds), reps)
## confidence interval for the cv.train folds in the inner loop
ci.complete <- rbind.model.ci(models.lasso.complete)
# extract important coefficients
extract.coefs.complete <- extractCoefs(models.lasso.complete) %>% do.call(rbind,.) %>% table()
# calculate percentages
feat.freq.complete <- data.frame(sort(extract.coefs.complete/100)) %>%
setNames(c("coef", "freq"))
# plot important features
# ggplot(data = feat.freq.complete, aes(coef, freq, fill = ifelse(freq > 0.5, "red", "blue"))) +
#   geom_bar(stat = "identity",  color = "black") +
#   coord_flip() +
#   xlab("") +
#   ylab("fraction of cv-models using this feature (relative feature importance)") +
#   theme_bw() +
#   scale_y_continuous(limits = c(0,1), breaks = seq(0,1,0.2), expand = c(0,0), labels = scales::percent_format()) +
#   geom_hline(yintercept = 0.5, lty = 2, color = "red") +
#   scale_fill_manual(labels = c("< 50 %", "> 50 %"), values = c("gray95", "lightblue")) +
#   labs(fill = "frequency")
#####################################
##
## c.1b relaxed LASSO of the complete model
##
#####################################
# obtain features for relaxed LASSO analysis (features with importance > 0.5, BRAF added manually within the function)
feat.relaxed <-  feat.freq.complete[feat.freq.complete$freq > 0.5,]
feat.relaxed <- feat.relaxed[as.character(feat.relaxed$coef) %like any% names(dat_log),]
# modelling and evaluation
models.lasso.relaxedLasso <- lassoEval("relaxedLasso", dat_log, rep = rep, k = k)
feat.relaxed
feat.freq.complete
models.lasso.relaxedLasso <- setNames(lapply(models.lasso.relaxedLasso, setNames, folds), reps)
## confidence interval for the cv.train folds in the inner loop
ci.relaxedLasso <- rbind.model.ci(models.lasso.relaxedLasso)
# extract important coefficients
extract.coefs.relaxedLasso <- extractCoefs(models.lasso.relaxedLasso) %>% do.call(rbind,.) %>% table()
# calculate percentages
feat.freq <- data.frame(sort(extract.coefs.relaxedLasso/100)) %>%
setNames(c("coef", "freq"))
feat.freq
ci.relaxedLasso
ci.signif
rbind.model.ci(models.lasso.signif)
rbind.model.ci(models.lasso.complete)
model.matrix.subset <- function(model, data){
if(model == "complete"){
mm <- model.matrix(Responder~., data = data)[,-1]
} else if(model == "miRNA"){
mm <- model.matrix(Responder~., data = select(data, c(contains("mir"),Responder)))[,-1]
} else if(model == "baseline"){
mm <- model.matrix(Responder~., data = select(data, contains(c("Eosinophile","LDH","S100","CRP")),Responder))[,-1]
} else if(model == "signif"){
mm <- model.matrix(Responder~., data = select(data, contains(readRDS("significant_features.rds")),Alter,prior_BRAF_therapy,Responder))[,-1]
} else if(model == "relaxedLasso"){
mm <- model.matrix(Responder~., data = select(data, c(feat.relaxed$coef, Alter, prior_BRAF_therapy,Responder)))[,-1]
} else if(model == "relaxedLassomiRNA"){
mm <- model.matrix(Responder~., data = select(data, c(feat.relaxed.miRNA$coef,Responder)))[,-1]
} else {
stop("Please specify 1 of the following 4 options:
1. 'baseline' for a base model using conventional serum markers (LDH, CRP, S100, Eosinophile)
2. 'miRNA' for a model using only miRNAs (reduced by lasso to informative features)
3. 'signif' for a model with significantly different features between responders and non-responders
4. 'complete' for a model with all predictors (reduced by lasso)
5. 'relaxedLasso' for a model with the best predictors selected by the 'complete' model (afterwards reduced again with LASSO)
6. 'relaxedLassomiRNA for a model with the best predictors selected by the 'miRNA' model (afterwards reduced again with LASSO")
}
return(mm)
}
models.lasso.relaxedLasso <- lassoEval("relaxedLasso", dat_log, rep = rep, k = k)
# saveRDS(models.lasso.relaxedLasso, "models/models_lasso_relaxedLasso.rds")
# models.lasso.relaxedLasso <- readRDS("models/models_lasso_relaxedLasso.rds")
# set names of list elements
models.lasso.relaxedLasso <- setNames(lapply(models.lasso.relaxedLasso, setNames, folds), reps)
## confidence interval for the cv.train folds in the inner loop
ci.relaxedLasso <- rbind.model.ci(models.lasso.relaxedLasso)
# extract important coefficients
extract.coefs.relaxedLasso <- extractCoefs(models.lasso.relaxedLasso) %>% do.call(rbind,.) %>% table()
# calculate percentages
feat.freq <- data.frame(sort(extract.coefs.relaxedLasso/100)) %>%
setNames(c("coef", "freq"))
feat.freq
ci.relaxedLasso
source_url("https://raw.githubusercontent.com/MBender1992/base_scripts/Marc/R_functions.R")
#####################################
##
## 1.Data loading and preprocessing
##
#####################################
# load data with custom function for melanoma data only for Responders
dat <- load_melanoma_data() %>%
filter(!is.na(Responder)) # n = 81
dat_fct <- dat %>%
filter(miRExpAssess == 1) %>%
select(-c(TRIM_PDL1_Expression , miRExpAssess, therapy_at_blood_draw)) %>%
mutate( across(c(Responder, Stadium, Baseline, BRAF, ECOG, subtype, localization,
sex, brainMet, adjuvant_IFN, organsInvolved, nras, prior_BRAF_therapy), as.factor))
dat_fct$subtype <- NULL
dat_fct$localization <- NULL
dat_fct$nras <- NULL
dat_fct$Baseline <- NULL
dat_fct$ID <- NULL
dat_fct$organsInvolved <- NULL
dat_fct$breslow_thickness_mm <- NULL # included in stage variable
dat_fct$BRAF <- NULL # highly correlated with prior BRAF therapy and therefore rather adds noise to the model
NAs <- sapply(dat_fct, function(df){
sum(is.na(df) ==TRUE)/length(df);
})
# remove columns with more than 20 % NAs
dat_fct <- dat_fct[, -which(NAs > 0.2)]
# convert factor columns to numerical
dat_fct$Stadium <- ifelse(dat_fct$Stadium == "II", 2,ifelse(dat_fct$Stadium == "III", 3, 4))
dat_fct$sex <- ifelse(dat_fct$sex == "m", 1, 0)
dat_fct$brainMet <- ifelse(dat_fct$brainMet == "ja", 1, 0)
dat_fct$prior_BRAF_therapy <- parse_number(as.character(dat_fct$prior_BRAF_therapy))
# impute missing values with random forest algorithm
set.seed(25)
dat_imp <- dat_fct %>%
select_if(is.numeric) %>%
as.data.frame() %>%
missForest() %>%
.$ximp %>%
# replace calculated probabilities by the factor
mutate(Stadium = round(Stadium),
Alter = round(Alter),
brainMet = ifelse(brainMet > 0.5, 1,0),
prior_BRAF_therapy = ifelse(prior_BRAF_therapy > 0.5, 1, 0))
# replace numerical values by factor for encoding later
dat_imp$sex <- factor(dat_imp$sex, levels = c(0,1), labels = c("w", "m"))
dat_imp$brainMet <- factor(dat_imp$brainMet, levels = c(0,1), labels = c("no", "yes"))
dat_imp$prior_BRAF_therapy  <- factor(dat_imp$prior_BRAF_therapy, levels = c(0,1), labels = c("no", "yes"))
dat_fct$Stadium <- dat_imp$Stadium
dat_fct$S100 <- dat_imp$S100
dat_fct$Alter<- dat_imp$Alter
dat_fct$brainMet <- dat_imp$brainMet
dat_fct$prior_BRAF_therapy <- dat_imp$prior_BRAF_therapy
dat_fct$sex <- dat_imp$sex
tmp <- dat_fct %>% select(where(is.numeric))
fctrs <- dat_fct %>% select(!where(is.numeric))
dat_log <- data.frame(cbind(log(tmp+1), fctrs))
#
y <- dat_log$Responder
readRDS("significant_features.rds")
extract.coefs.complete
feat.freq.complete
k <- 10
rep <- 10
models.lasso.complete <- lassoEval("complete", dat_log, rep = rep, k = k)
# saveRDS(models.lasso.complete, "models/models_lasso_complete.rds")
# models.lasso.complete <- readRDS("models/models_lasso_complete.rds")
# set names of list elements
models.lasso.complete <- setNames(lapply(models.lasso.complete, setNames, folds), reps)
## confidence interval for the cv.train folds in the inner loop
ci.complete <- rbind.model.ci(models.lasso.complete)
# extract important coefficients
extract.coefs.complete <- extractCoefs(models.lasso.complete) %>% do.call(rbind,.) %>% table()
# calculate percentages
feat.freq.complete <- data.frame(sort(extract.coefs.complete/100)) %>%
setNames(c("coef", "freq"))
# plot important features
# ggplot(data = feat.freq.complete, aes(coef, freq, fill = ifelse(freq > 0.5, "red", "blue"))) +
#   geom_bar(stat = "identity",  color = "black") +
#   coord_flip() +
#   xlab("") +
#   ylab("fraction of cv-models using this feature (relative feature importance)") +
#   theme_bw() +
#   scale_y_continuous(limits = c(0,1), breaks = seq(0,1,0.2), expand = c(0,0), labels = scales::percent_format()) +
#   geom_hline(yintercept = 0.5, lty = 2, color = "red") +
#   scale_fill_manual(labels = c("< 50 %", "> 50 %"), values = c("gray95", "lightblue")) +
#   labs(fill = "frequency")
#####################################
##
## c.1b relaxed LASSO of the complete model
##
#####################################
# obtain features for relaxed LASSO analysis (features with importance > 0.5, BRAF added manually within the function)
feat.relaxed <-  feat.freq.complete[feat.freq.complete$freq > 0.5,]
feat.relaxed <- feat.relaxed[as.character(feat.relaxed$coef) %like any% names(dat_log),]
# modelling and evaluation
models.lasso.relaxedLasso <- lassoEval("relaxedLasso", dat_log, rep = rep, k = k)
readRDS("significant_features.rds")
readRDS("significant_features.rds")
feat.freq.complete
feat.relaxed
feat.relaxed
c(feat.relaxed$coef, Alter, prior_BRAF_therapy,Responder))
c(feat.relaxed$coef, Alter, prior_BRAF_therapy,Responder)
model.matrix.subset <- function(model, data){
if(model == "complete"){
mm <- model.matrix(Responder~., data = data)[,-1]
} else if(model == "miRNA"){
mm <- model.matrix(Responder~., data = select(data, c(contains("mir"),Responder)))[,-1]
} else if(model == "baseline"){
mm <- model.matrix(Responder~., data = select(data, contains(c("Eosinophile","LDH","S100","CRP")),Responder))[,-1]
} else if(model == "signif"){
mm <- model.matrix(Responder~., data = select(data, contains(readRDS("significant_features.rds")),Alter,prior_BRAF_therapy,Responder))[,-1]
} else if(model == "relaxedLasso"){
mm <- model.matrix(Responder~., data = select(data, c(feat.relaxed$coef, Alter, prior_BRAF_therapy,Responder)))[,-1]
} else if(model == "relaxedLassomiRNA"){
mm <- model.matrix(Responder~., data = select(data, c(feat.relaxed.miRNA$coef,Responder)))[,-1]
} else {
stop("Please specify 1 of the following 4 options:
1. 'baseline' for a base model using conventional serum markers (LDH, CRP, S100, Eosinophile)
2. 'miRNA' for a model using only miRNAs (reduced by lasso to informative features)
3. 'signif' for a model with significantly different features between responders and non-responders
4. 'complete' for a model with all predictors (reduced by lasso)
5. 'relaxedLasso' for a model with the best predictors selected by the 'complete' model (afterwards reduced again with LASSO)
6. 'relaxedLassomiRNA for a model with the best predictors selected by the 'miRNA' model (afterwards reduced again with LASSO")
}
return(mm)
}
select(dat_log, c(feat.relaxed$coef, Alter, prior_BRAF_therapy,Responder))
models.lasso.relaxedLasso <- lassoEval("relaxedLasso", dat_log, rep = rep, k = k)
models.lasso.relaxedLasso <- setNames(lapply(models.lasso.relaxedLasso, setNames, folds), reps)
## confidence interval for the cv.train folds in the inner loop
ci.relaxedLasso <- rbind.model.ci(models.lasso.relaxedLasso)
ci.relaxedLasso
extract.coefs.relaxedLasso <- extractCoefs(models.lasso.relaxedLasso) %>% do.call(rbind,.) %>% table()
# calculate percentages
feat.freq <- data.frame(sort(extract.coefs.relaxedLasso/100)) %>%
setNames(c("coef", "freq"))
feat.freq
feat.freq.complete
feat.freq
dat_log$Responder
saveRDS(models.lasso.complete, "models/models_lasso_complete.rds")
saveRDS(models.lasso.relaxedLasso, "models/models_lasso_relaxedLasso.rds")
saveRDS(models.lasso.baseline, "models/models_lasso_baseline.rds")
rbind.model.ci(models.lasso.baseline)
rbind.model.ci(models.lasso.signif)
saveRDS(models.lasso.signif, "models/models_lasso_signif.rds")
saveRDS(models.lasso.miRNA, "models/models_lasso_miRNA.rds")
saveRDS(models.lasso.relaxed.miRNA, "models/models_lasso_relaxed_miRNA.rds")
models.lasso.relaxed.miRNA <- readRDS("models/models_lasso_relaxed_miRNA.rds")
dat_compare <- rbind(complete = ci.complete,
relaxedLasso = ci.relaxedLasso,
baseline = ci.baseline,
signif = ci.signif,
miRNA = ci.miRNA,
relaxedmiRNA = ci.relaxed.miRNA) %>%
rownames_to_column("tmp") %>%
separate(tmp,c("model", "results"), extra = "merge") %>%
mutate(model = factor(model),
model = reorder(model, mean))
dat_compare
rbind.model.ci(models.lasso.signif)
models.lasso.signif <- readRDS("models/models_lasso_signif.rds")
# set names of list elements
models.lasso.signif <- setNames(lapply(models.lasso.signif, setNames, folds), reps)
## confidence interval for the cv.train folds in the inner loop
ci.signif <- rbind.model.ci(models.lasso.signif)
models.lasso.miRNA <- setNames(lapply(models.lasso.miRNA, setNames, folds), reps)
## confidence interval for the cv.train folds in the inner loop
ci.miRNA <- rbind.model.ci(models.lasso.miRNA)
# extract important coefficients
extract.coefs.miRNA <- extractCoefs(models.lasso.miRNA) %>% do.call(rbind,.) %>% table()
# calculate percentages
feat.freq.miRNA <- data.frame(sort(extract.coefs.miRNA/100)) %>%
setNames(c("coef", "freq"))
models.lasso.signif <- setNames(lapply(models.lasso.signif, setNames, folds), reps)
## confidence interval for the cv.train folds in the inner loop
ci.signif <- rbind.model.ci(models.lasso.signif)
# extract important coefficients
extract.coefs.signif <- extractCoefs(models.lasso.signif) %>% do.call(rbind,.) %>% table()
# calculate percentages
feat.freq <- data.frame(sort(extract.coefs.signif/100)) %>%
setNames(c("coef", "freq"))
models.lasso.baseline <- setNames(lapply(models.lasso.baseline, setNames, folds), reps)
## confidence interval for the cv.train folds in the inner loop
ci.baseline <- rbind.model.ci(models.lasso.baseline)
# extract important coefficients
extract.coefs.baseline <- extractCoefs(models.lasso.baseline) %>% do.call(rbind,.) %>% table()
# calculate percentages
feat.freq <- data.frame(sort(extract.coefs.baseline/100)) %>%
setNames(c("coef", "freq"))
models.lasso.relaxedLasso <- setNames(lapply(models.lasso.relaxedLasso, setNames, folds), reps)
## confidence interval for the cv.train folds in the inner loop
ci.relaxedLasso <- rbind.model.ci(models.lasso.relaxedLasso)
# extract important coefficients
extract.coefs.relaxedLasso <- extractCoefs(models.lasso.relaxedLasso) %>% do.call(rbind,.) %>% table()
# calculate percentages
feat.freq <- data.frame(sort(extract.coefs.relaxedLasso/100)) %>%
setNames(c("coef", "freq"))
models.lasso.complete <- setNames(lapply(models.lasso.complete, setNames, folds), reps)
## confidence interval for the cv.train folds in the inner loop
ci.complete <- rbind.model.ci(models.lasso.complete)
# extract important coefficients
extract.coefs.complete <- extractCoefs(models.lasso.complete) %>% do.call(rbind,.) %>% table()
# calculate percentages
feat.freq.complete <- data.frame(sort(extract.coefs.complete/100)) %>%
setNames(c("coef", "freq"))
dat_compare <- rbind(complete = ci.complete,
relaxedLasso = ci.relaxedLasso,
baseline = ci.baseline,
signif = ci.signif,
miRNA = ci.miRNA,
relaxedmiRNA = ci.relaxed.miRNA) %>%
rownames_to_column("tmp") %>%
separate(tmp,c("model", "results"), extra = "merge") %>%
mutate(model = factor(model),
model = reorder(model, mean))
dat_compare
