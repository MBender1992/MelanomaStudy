df.train <- lapply(1:rep, function(split){
do.call(rbind.data.frame, sapply(models.lasso.baseline[[split]], '[', 'train.metrics')) %>%
summarize(mean = mean(ROC), meanSens = mean(Sens, na.rm=T), meanSpec = mean(Spec))
})
#
df.test <- lapply(1:rep, function(split){
do.call(rbind.data.frame, sapply(models.lasso.baseline[[split]], '[', 'test.metrics')) %>%
summarize(mean = mean(AUC), meanSens = mean(Sens, na.rm=T), meanSpec = mean(Spec))
})
# extract important coefficients
extract.coefs <-lapply(1:10, function(x){
tmp <- sapply(sapply(models.lasso.baseline[[1]], '[', 'coefficients'), '[', 'coefs') %>% unlist()
data.frame(coef = tmp)
}) %>% do.call(rbind,.) %>% table()
# calculate percentages
feat.freq <- data.frame(sort(extract.coefs/100)) %>%
setNames(c("coef", "freq"))
# plot important features
ggplot(data = feat.freq, aes(coef, freq, fill = ifelse(freq > 0.5, "red", "blue"))) +
geom_bar(stat = "identity",  color = "black") +
coord_flip() +
xlab("") +
ylab("fraction of cv-models using this feature (relative feature importance)") +
theme_bw() +
scale_y_continuous(limits = c(0,1), breaks = seq(0,1,0.2), expand = c(0,0), labels = scales::percent_format()) +
geom_hline(yintercept = 0.5, lty = 2, color = "red") +
scale_fill_manual(labels = c("< 50 %", "> 50 %"), values = c("gray95", "lightblue")) +
labs(fill = "frequency")
# load data with custom function for melanoma data only for Responders
dat <- load_melanoma_data() %>%
filter(!is.na(Responder)) # n = 81
library(missForest)
library(tidyverse)
library(devtools)
library(caret)
library(doParallel)
library(pROC)
library(pbapply)
# source R functions
source_url("https://raw.githubusercontent.com/MBender1992/base_scripts/Marc/R_functions.R")
models.lasso.miRNA
x <- model.matrix.subset("miRNA", data = dat_log)
# activate parallel computing
cl <- makeCluster(detectCores(), type='PSOCK')
registerDoParallel(cl)
# generate 10 folds for outer loop
rep <- 10
k <- 10
set.seed(12)
fold.train <- createMultiFolds(y, k = k, times = rep) # ensure that at least 10 samples are in each fold
# split data based on these folds (Fold1 means that Fold1 is used for testing)
train.test.folds <- lapply(c(1:rep), function(split){
# select only folds containing the specified repeat in each iteration
if(split == 10){
ind <- names(fold.train) %>% str_detect("Rep10")
dat <- fold.train[ind]
} else {
ind <- names(fold.train) %>% str_detect(paste("Rep0",split, sep =""))
dat <- fold.train[ind]
}
# split data into training and test set with each fold being the test set once
res <- lapply(c(1:k), function(fold){
list(x.test = x[-dat[[fold]],],
x.train = x[dat[[fold]],],
y.test = y[-dat[[fold]]],
y.train = y[dat[[fold]]]
)
})
return(res)
})
# define name of the list elements
reps <- paste0("Rep", 1:rep)
folds <- paste0("Fold", 1:k)
train.test.folds <- setNames(lapply(train.test.folds, setNames, folds), reps)
set.seed(849)
models.lasso.miRNA  <-lapply(c(1:rep), function(split){
# select Data from 1 repeat
dat <- train.test.folds[[paste("Rep",split, sep ="")]]
# print message to follow progress
message(paste("Starting calculation of Rep", split,"... of", rep))
# apply model to all folds of that 1 repeat and test against the remaining fold not used for training
res <- pblapply(c(1:k), function(fold){
calc.model.metrics.2(x.train = dat[[fold]]$x.train, y.train = dat[[fold]]$y.train, x.test =dat[[fold]]$x.test,
y.test = dat[[fold]]$y.test, train.method = "glmnet",
tuneGrid = expand.grid(alpha = 1, lambda = seq(0.01,0.2,by = 0.01)))
})
return(res)
})
# set names of list elements
models.lasso.miRNA <- setNames(lapply(models.lasso.miRNA, setNames, folds), reps)
# extract train metrics from list and convert to data.frame
df.train <- lapply(1:rep, function(split){
do.call(rbind.data.frame, sapply(models.lasso.miRNA[[split]], '[', 'train.metrics')) %>%
summarize(mean = mean(ROC), meanSens = mean(Sens, na.rm=T), meanSpec = mean(Spec))
})
#
df.test <- lapply(1:rep, function(split){
do.call(rbind.data.frame, sapply(models.lasso.miRNA[[split]], '[', 'test.metrics')) %>%
summarize(mean = mean(AUC), meanSens = mean(Sens, na.rm=T), meanSpec = mean(Spec))
})
# extract important coefficients
extract.coefs <-lapply(1:10, function(x){
tmp <- sapply(sapply(models.lasso.miRNA[[1]], '[', 'coefficients'), '[', 'coefs') %>% unlist()
data.frame(coef = tmp)
}) %>% do.call(rbind,.) %>% table()
# calculate percentages
feat.freq <- data.frame(sort(extract.coefs/100)) %>%
setNames(c("coef", "freq"))
# plot important features
ggplot(data = feat.freq, aes(coef, freq, fill = ifelse(freq > 0.5, "red", "blue"))) +
geom_bar(stat = "identity",  color = "black") +
coord_flip() +
xlab("") +
ylab("fraction of cv-models using this feature (relative feature importance)") +
theme_bw() +
scale_y_continuous(limits = c(0,1), breaks = seq(0,1,0.2), expand = c(0,0), labels = scales::percent_format()) +
geom_hline(yintercept = 0.5, lty = 2, color = "red") +
scale_fill_manual(labels = c("< 50 %", "> 50 %"), values = c("gray95", "lightblue")) +
labs(fill = "frequency")
# load packages
library(missForest)
library(tidyverse)
library(devtools)
library(caret)
library(doParallel)
library(pROC)
library(pbapply)
# source R functions
source_url("https://raw.githubusercontent.com/MBender1992/base_scripts/Marc/R_functions.R")
models.lasso.complete <- readRDS("models_lasso_complete.rds")
extract.coefs.complete <-lapply(1:10, function(x){
tmp <- sapply(sapply(models.lasso.complete[[x]], '[', 'coefficients'), '[', 'coefs') %>% unlist()
data.frame(coef = tmp)
}) %>% do.call(rbind,.) %>% table()
# calculate percentages
feat.freq.complete <- data.frame(sort(extract.coefs.complete/100)) %>%
setNames(c("coef", "freq"))
models.lasso.miRNA <- readRDS("models_lasso_relaxedLasso.rds")
models.lasso.relaxedLasso <- setNames(lapply(models.lasso.relaxedLasso, setNames, folds), reps)
# extract metrics for inner fold (training) and outer fold (testing) from list and convert to df
df.train <- trainDF(models.lasso.relaxedLasso)
df.test <- testDF(models.lasso.relaxedLasso)
# extract important coefficients
extract.coefs <- extractCoefs(models.lasso.relaxedLasso) %>% do.call(rbind,.) %>% table()
# calculate percentages
feat.freq <- data.frame(sort(extract.coefs/100)) %>%
setNames(c("coef", "freq"))
models.lasso.miRNA <- readRDS("models_lasso_relaxedLasso.rds")
models.lasso.relaxedLasso <- readRDS("models_lasso_relaxedLasso.rds")
models.lasso.relaxedLasso <- setNames(lapply(models.lasso.relaxedLasso, setNames, folds), reps)
# extract metrics for inner fold (training) and outer fold (testing) from list and convert to df
df.train <- trainDF(models.lasso.relaxedLasso)
df.test <- testDF(models.lasso.relaxedLasso)
# extract important coefficients
extract.coefs <- extractCoefs(models.lasso.relaxedLasso) %>% do.call(rbind,.) %>% table()
# calculate percentages
feat.freq <- data.frame(sort(extract.coefs/100)) %>%
setNames(c("coef", "freq"))
ifelse(feat.freqfreq > 0.5, "red", "blue"))
ifelse(feat.freqfreq > 0.5, "red", "blue")
ifelse(feat.freq$freq > 0.5, "red", "blue")
ggplot(data = feat.freq, aes(coef, freq, fill = ifelse(freq > 0.5, "red", "blue"))) +
geom_bar(stat = "identity",  color = "black") +
coord_flip() +
xlab("") +
ylab("fraction of cv-models using this feature (relative feature importance)") +
theme_bw() +
scale_y_continuous(limits = c(0,1), breaks = seq(0,1,0.2), expand = c(0,0), labels = scales::percent_format()) +
geom_hline(yintercept = 0.5, lty = 2, color = "red")
ggplot(data = feat.freq, aes(coef, freq, fill = "lightblue")) +
geom_bar(stat = "identity",  color = "black") +
coord_flip() +
xlab("") +
ylab("fraction of cv-models using this feature (relative feature importance)") +
theme_bw() +
scale_y_continuous(limits = c(0,1), breaks = seq(0,1,0.2), expand = c(0,0), labels = scales::percent_format()) +
geom_hline(yintercept = 0.5, lty = 2, color = "red") +
labs(fill = "frequency")
ggplot(data = feat.freq, aes(coef, freq, fill = "lightblue")) +
geom_bar(stat = "identity",  color = "black") +
coord_flip() +
xlab("") +
ylab("fraction of cv-models using this feature (relative feature importance)") +
theme_bw() +
scale_y_continuous(limits = c(0,1), breaks = seq(0,1,0.2), expand = c(0,0), labels = scales::percent_format()) +
geom_hline(yintercept = 0.5, lty = 2, color = "red")
ggplot(data = feat.freq, aes(coef, freq)) +
geom_bar(stat = "identity",  color = "black", fill = "lightblue") +
coord_flip() +
xlab("") +
ylab("fraction of cv-models using this feature (relative feature importance)") +
theme_bw() +
scale_y_continuous(limits = c(0,1), breaks = seq(0,1,0.2), expand = c(0,0), labels = scales::percent_format()) +
geom_hline(yintercept = 0.5, lty = 2, color = "red")
df.train
df.test
sapply(df.test, '[', 'mean')
sapply(df.test, '[', 'mean') %>% unlist() %>% mean()
sapply(df.train, '[', 'mean') %>% unlist() %>% mean()
df.train.relaxedLasso <- trainDF(models.lasso.relaxedLasso)
df.test.relaxedLasso <- testDF(models.lasso.relaxedLasso)
# extract important coefficients
extract.coefs.relaxedLasso <- extractCoefs(models.lasso.relaxedLasso) %>% do.call(rbind,.) %>% table()
reps
lassoEval <- function(model, dat, rep, k){
# define model matrix with selected features
x <- model.matrix.subset(model, data = dat)
# activate parallel computing
cl <- makeCluster(detectCores(), type='PSOCK')
registerDoParallel(cl)
# generate 10 folds for outer loop
set.seed(12)
fold.train <- createMultiFolds(y, k = k, times = rep) # ensure that at least 10 samples are in each fold
# split data based on these folds (Fold1 means that Fold1 is used for testing)
train.test.folds <- lapply(c(1:rep), function(split){
# select only folds containing the specified repeat in each iteration
if(split == 10){
ind <- names(fold.train) %>% str_detect("Rep10")
dat <- fold.train[ind]
} else {
ind <- names(fold.train) %>% str_detect(paste("Rep0",split, sep =""))
dat <- fold.train[ind]
}
# split data into training and test set with each fold being the test set once
res <- lapply(c(1:k), function(fold){
list(x.test = x[-dat[[fold]],],
x.train = x[dat[[fold]],],
y.test = y[-dat[[fold]]],
y.train = y[dat[[fold]]]
)
})
return(res)
})
# define name of the list elements
reps <<- paste0("Rep", 1:rep)
folds <<- paste0("Fold", 1:k)
train.test.folds <- setNames(lapply(train.test.folds, setNames, folds), reps)
set.seed(849)
lapply(c(1:rep), function(split){
# select Data from 1 repeat
dat <- train.test.folds[[paste("Rep",split, sep ="")]]
# print message to follow progress
message(paste("Starting calculation of Rep", split,"... of", rep))
# apply model to all folds of that 1 repeat and test against the remaining fold not used for training
res <- pblapply(c(1:k), function(fold){
calc.model.metrics.2(x.train = dat[[fold]]$x.train, y.train = dat[[fold]]$y.train, x.test =dat[[fold]]$x.test,
y.test = dat[[fold]]$y.test, train.method = "glmnet",
tuneGrid = expand.grid(alpha = 1, lambda = seq(0.01,0.2,by = 0.01)))
})
})
}
models.lasso.relaxedLasso <- readRDS("models/models_lasso_relaxedLasso.rds")
models.lasso.complete <- readRDS("models/models_lasso_complete.rds")
# set names of list elements
models.lasso.complete <- setNames(lapply(models.lasso.complete, setNames, folds), reps)
# extract metrics for inner fold (training) and outer fold (testing) from list and convert to df
df.train.complete <- trainDF(models.lasso.complete)
df.test.complete <- testDF(models.lasso.complete)
# extract important coefficients
extract.coefs.complete <- extractCoefs(models.lasso.complete) %>% do.call(rbind,.) %>% table()
feat.freq.complete <- data.frame(sort(extract.coefs.complete/100)) %>%
setNames(c("coef", "freq"))
# plot important features
ggplot(data = feat.freq.complete, aes(coef, freq, fill = ifelse(freq > 0.5, "red", "blue"))) +
geom_bar(stat = "identity",  color = "black") +
coord_flip() +
xlab("") +
ylab("fraction of cv-models using this feature (relative feature importance)") +
theme_bw() +
scale_y_continuous(limits = c(0,1), breaks = seq(0,1,0.2), expand = c(0,0), labels = scales::percent_format()) +
geom_hline(yintercept = 0.5, lty = 2, color = "red") +
scale_fill_manual(labels = c("< 50 %", "> 50 %"), values = c("gray95", "lightblue")) +
labs(fill = "frequency")
models.lasso.baseline <- readRDS("models/models_lasso_complete.rds")
# set names of list elements
models.lasso.baseline <- setNames(lapply(models.lasso.baseline, setNames, folds), reps)
# extract metrics for inner fold (training) and outer fold (testing) from list and convert to df
df.train.baseline <- trainDF(models.lasso.baseline)
df.test.baseline <- testDF(models.lasso.baseline)
# extract important coefficients
extract.coefs.miRNA <- extractCoefs(models.lasso.miRNA) %>% do.call(rbind,.) %>% table()
feat.freq <- data.frame(sort(extract.coefs/100)) %>%
setNames(c("coef", "freq"))
# plot important features
ggplot(data = feat.freq, aes(coef, freq, fill = ifelse(freq > 0.5, "red", "blue"))) +
geom_bar(stat = "identity",  color = "black") +
coord_flip() +
xlab("") +
ylab("fraction of cv-models using this feature (relative feature importance)") +
theme_bw() +
scale_y_continuous(limits = c(0,1), breaks = seq(0,1,0.2), expand = c(0,0), labels = scales::percent_format()) +
geom_hline(yintercept = 0.5, lty = 2, color = "red") +
scale_fill_manual(labels = c("< 50 %", "> 50 %"), values = c("gray95", "lightblue")) +
labs(fill = "frequency")
feat.freq <- data.frame(sort(extract.coefs.baseline/100)) %>%
setNames(c("coef", "freq"))
# extract important coefficients
extract.coefs.baseline <- extractCoefs(models.lasso.baseline) %>% do.call(rbind,.) %>% table()
feat.freq <- data.frame(sort(extract.coefs.baseline/100)) %>%
setNames(c("coef", "freq"))
feat.freq
models.lasso.baseline <- readRDS("models/models_lasso_complete.rds")
# set names of list elements
models.lasso.baseline <- setNames(lapply(models.lasso.baseline, setNames, folds), reps)
# extract metrics for inner fold (training) and outer fold (testing) from list and convert to df
df.train.baseline <- trainDF(models.lasso.baseline)
df.test.baseline <- testDF(models.lasso.baseline)
# extract important coefficients
extract.coefs.baseline <- extractCoefs(models.lasso.baseline) %>% do.call(rbind,.) %>% table()
extract.coefs.baseline
models.lasso.baseline <- readRDS("models/models_lasso_baseline.rds")
models.lasso.baseline <- setNames(lapply(models.lasso.baseline, setNames, folds), reps)
# extract metrics for inner fold (training) and outer fold (testing) from list and convert to df
df.train.baseline <- trainDF(models.lasso.baseline)
df.test.baseline <- testDF(models.lasso.baseline)
# extract important coefficients
extract.coefs.baseline <- extractCoefs(models.lasso.baseline) %>% do.call(rbind,.) %>% table()
# calculate percentages
feat.freq <- data.frame(sort(extract.coefs.baseline/100)) %>%
setNames(c("coef", "freq"))
feat.freq
ggplot(data = feat.freq, aes(coef, freq, fill = ifelse(freq > 0.5, "red", "blue"))) +
geom_bar(stat = "identity",  color = "black") +
coord_flip() +
xlab("") +
ylab("fraction of cv-models using this feature (relative feature importance)") +
theme_bw() +
scale_y_continuous(limits = c(0,1), breaks = seq(0,1,0.2), expand = c(0,0), labels = scales::percent_format()) +
geom_hline(yintercept = 0.5, lty = 2, color = "red") +
scale_fill_manual(labels = c("< 50 %", "> 50 %"), values = c("gray95", "lightblue")) +
labs(fill = "frequency")
models.lasso.signif <- readRDS("models/models_lasso_signif.rds")
# set names of list elements
models.lasso.signif <- setNames(lapply(models.lasso.signif, setNames, folds), reps)
# extract metrics for inner fold (training) and outer fold (testing) from list and convert to df
df.train.signif <- trainDF(models.lasso.signif)
df.test.signif <- testDF(models.lasso.signif)
# extract important coefficients
extract.coefs.signif <- extractCoefs(models.lasso.signif) %>% do.call(rbind,.) %>% table()
# calculate percentages
feat.freq <- data.frame(sort(extract.coefs/100)) %>%
setNames(c("coef", "freq"))
ggplot(data = feat.freq, aes(coef, freq, fill = ifelse(freq > 0.5, "red", "blue"))) +
geom_bar(stat = "identity",  color = "black") +
coord_flip() +
xlab("") +
ylab("fraction of cv-models using this feature (relative feature importance)") +
theme_bw() +
scale_y_continuous(limits = c(0,1), breaks = seq(0,1,0.2), expand = c(0,0), labels = scales::percent_format()) +
geom_hline(yintercept = 0.5, lty = 2, color = "red") +
scale_fill_manual(labels = c("< 50 %", "> 50 %"), values = c("gray95", "lightblue")) +
labs(fill = "frequency")
feat.freq <- data.frame(sort(extract.coefs.signif/100)) %>%
setNames(c("coef", "freq"))
feat.freq
# plot important features
ggplot(data = feat.freq, aes(coef, freq, fill = ifelse(freq > 0.5, "red", "blue"))) +
geom_bar(stat = "identity",  color = "black") +
coord_flip() +
xlab("") +
ylab("fraction of cv-models using this feature (relative feature importance)") +
theme_bw() +
scale_y_continuous(limits = c(0,1), breaks = seq(0,1,0.2), expand = c(0,0), labels = scales::percent_format()) +
geom_hline(yintercept = 0.5, lty = 2, color = "red") +
scale_fill_manual(labels = c("< 50 %", "> 50 %"), values = c("gray95", "lightblue")) +
labs(fill = "frequency")
ggplot(data = feat.freq, aes(coef, freq)) +
geom_bar(stat = "identity",  color = "black", fill = "lightblue") +
coord_flip() +
xlab("") +
ylab("fraction of cv-models using this feature (relative feature importance)") +
theme_bw() +
scale_y_continuous(limits = c(0,1), breaks = seq(0,1,0.2), expand = c(0,0), labels = scales::percent_format()) +
geom_hline(yintercept = 0.5, lty = 2, color = "red") +
labs(fill = "frequency")
models.lasso.miRNA <- lassoEval("miRNA", dat_log, rep = 10, k = 10)
# models.lasso.miRNA <- readRDS("models/models_lasso_miRNA.rds")
# set names of list elements
models.lasso.miRNA <- setNames(lapply(models.lasso.miRNA, setNames, folds), reps)
# extract metrics for inner fold (training) and outer fold (testing) from list and convert to df
df.train.miRNA <- trainDF(models.lasso.miRNA)
df.test.miRNA <- testDF(models.lasso.miRNA)
# extract important coefficients
extract.coefs.miRNA <- extractCoefs(models.lasso.miRNA) %>% do.call(rbind,.) %>% table()
# calculate percentages
feat.freq <- data.frame(sort(extract.coefs.miRNA/100)) %>%
setNames(c("coef", "freq"))
models.lasso.miRNA <- readRDS("models/models_lasso_miRNA.rds")
models.lasso.miRNA <- readRDS("models/models_lasso_miRNA.rds")
# set names of list elements
models.lasso.miRNA <- setNames(lapply(models.lasso.miRNA, setNames, folds), reps)
# extract metrics for inner fold (training) and outer fold (testing) from list and convert to df
df.train.miRNA <- trainDF(models.lasso.miRNA)
df.test.miRNA <- testDF(models.lasso.miRNA)
# extract important coefficients
extract.coefs.miRNA <- extractCoefs(models.lasso.miRNA) %>% do.call(rbind,.) %>% table()
# calculate percentages
feat.freq <- data.frame(sort(extract.coefs.miRNA/100)) %>%
setNames(c("coef", "freq"))
feat.freq
# plot important features
ggplot(data = feat.freq, aes(coef, freq, fill = ifelse(freq > 0.5, "red", "blue"))) +
geom_bar(stat = "identity",  color = "black") +
coord_flip() +
xlab("") +
ylab("fraction of cv-models using this feature (relative feature importance)") +
theme_bw() +
scale_y_continuous(limits = c(0,1), breaks = seq(0,1,0.2), expand = c(0,0), labels = scales::percent_format()) +
geom_hline(yintercept = 0.5, lty = 2, color = "red") +
scale_fill_manual(labels = c("< 50 %", "> 50 %"), values = c("gray95", "lightblue")) +
labs(fill = "frequency")
feat.relaxed <-  feat.freq.complete[feat.freq.complete$freq > 0.5,]
feat.relaxed <- feat.relaxed[feat.relaxed$coef != "BRAFpos",]
models.lasso.relaxedLasso <- lassoEval("relaxedLasso", dat_log, rep = rep, k = k)
# models.lasso.relaxedLasso <- readRDS("models/models_lasso_relaxedLasso.rds")
# set names of list elements
models.lasso.relaxedLasso <- setNames(lapply(models.lasso.relaxedLasso, setNames, folds), reps)
# extract metrics for inner fold (training) and outer fold (testing) from list and convert to df
df.train.relaxedLasso <- trainDF(models.lasso.relaxedLasso)
df.test.relaxedLasso <- testDF(models.lasso.relaxedLasso)
# extract important coefficients
extract.coefs.relaxedLasso <- extractCoefs(models.lasso.relaxedLasso) %>% do.call(rbind,.) %>% table()
# calculate percentages
feat.freq <- data.frame(sort(extract.coefs/100)) %>%
setNames(c("coef", "freq"))
model.matrix.subset <- function(model, data){
if(model == "complete"){
mm <- model.matrix(Responder~., data = data)[,-1]
} else if(model == "miRNA"){
mm <- model.matrix(Responder~., data = select(data, c(contains("mir"),Responder)))[,-1]
} else if(model == "baseline"){
mm <- model.matrix(Responder~., data = select(data, contains(c("Eosinophile","LDH","S100","CRP")),Responder))[,-1]
} else if(model == "signif"){
mm <- model.matrix(Responder~., data = select(data, contains(readRDS("significant_features.rds")),Responder))[,-1]
} else if(model == "relaxedLasso"){
mm <- model.matrix(Responder~., data = select(dat_log, c(feat.relaxed$coef,BRAF,Responder)))[,-1]
} else {
stop("Please specify 1 of the following 4 options:
1. 'baseline' for a base model using conventional serum markers (LDH, CRP, S100, Eosinophile)
2. 'miRNA' for a model using only miRNAs (reduced by lasso to informative features)
3. 'signif' for a model with significantly different features between responders and non-responders
4. 'complete' for a model with all predictors (reduced by lasso)
5. 'relaxedLasso' for a model with the best predictors selected by the 'complete' model (afterwards reduced again with LASSO)")
}
return(mm)
}
feat.relaxed <-  feat.freq.complete[feat.freq.complete$freq > 0.5,]
feat.relaxed <- feat.relaxed[feat.relaxed$coef != "BRAFpos",]
feat.relaxed
models.lasso.relaxedLasso <- readRDS("models/models_lasso_relaxedLasso.rds")
# set names of list elements
models.lasso.relaxedLasso <- setNames(lapply(models.lasso.relaxedLasso, setNames, folds), reps)
# extract metrics for inner fold (training) and outer fold (testing) from list and convert to df
df.train.relaxedLasso <- trainDF(models.lasso.relaxedLasso)
df.test.relaxedLasso <- testDF(models.lasso.relaxedLasso)
extract.coefs.relaxedLasso <- extractCoefs(models.lasso.relaxedLasso) %>% do.call(rbind,.) %>% table()
# calculate percentages
feat.freq <- data.frame(sort(extract.coefs.relaxedLasso/100)) %>%
setNames(c("coef", "freq"))
feat.freq
# plot important features
ggplot(data = feat.freq, aes(coef, freq)) +
geom_bar(stat = "identity",  color = "black", fill = "lightblue") +
coord_flip() +
xlab("") +
ylab("fraction of cv-models using this feature (relative feature importance)") +
theme_bw() +
scale_y_continuous(limits = c(0,1), breaks = seq(0,1,0.2), expand = c(0,0), labels = scales::percent_format()) +
geom_hline(yintercept = 0.5, lty = 2, color = "red")
feat.freq.complete <- data.frame(sort(extract.coefs.complete/100)) %>%
setNames(c("coef", "freq"))
# plot important features
ggplot(data = feat.freq.complete, aes(coef, freq, fill = ifelse(freq > 0.5, "red", "blue"))) +
geom_bar(stat = "identity",  color = "black") +
coord_flip() +
xlab("") +
ylab("fraction of cv-models using this feature (relative feature importance)") +
theme_bw() +
scale_y_continuous(limits = c(0,1), breaks = seq(0,1,0.2), expand = c(0,0), labels = scales::percent_format()) +
geom_hline(yintercept = 0.5, lty = 2, color = "red") +
scale_fill_manual(labels = c("< 50 %", "> 50 %"), values = c("gray95", "lightblue")) +
labs(fill = "frequency")
library(missForest)
library(tidyverse)
library(devtools)
library(caret)
library(doParallel)
library(pROC)
library(pbapply)
# source R functions
source_url("https://raw.githubusercontent.com/MBender1992/base_scripts/Marc/R_functions.R")
readRDS("models/models_lasso_relaxedLasso.rds")
models.lasso.relaxedLasso <- readRDS("models/models_lasso_relaxedLasso.rds")
# set names of list elements
models.lasso.relaxedLasso <- setNames(lapply(models.lasso.relaxedLasso, setNames, folds), reps)
# extract metrics for inner fold (training) and outer fold (testing) from list and convert to df
df.train.relaxedLasso <- trainDF(models.lasso.relaxedLasso)
df.test.relaxedLasso <- testDF(models.lasso.relaxedLasso)
# extract important coefficients
extract.coefs.relaxedLasso <- extractCoefs(models.lasso.relaxedLasso) %>% do.call(rbind,.) %>% table()
# calculate percentages
feat.freq <- data.frame(sort(extract.coefs.relaxedLasso/100)) %>%
setNames(c("coef", "freq"))
# plot important features
ggplot(data = feat.freq, aes(coef, freq)) +
geom_bar(stat = "identity",  color = "black", fill = "lightblue") +
coord_flip() +
xlab("") +
ylab("fraction of cv-models using this feature (relative feature importance)") +
theme_bw() +
scale_y_continuous(limits = c(0,1), breaks = seq(0,1,0.2), expand = c(0,0), labels = scales::percent_format()) +
geom_hline(yintercept = 0.5, lty = 2, color = "red")
