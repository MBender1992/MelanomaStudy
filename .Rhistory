paste("Rep", i, sep="")}
)
lapply(c(1:times), function(rep){
names(train.test.folds[[paste("Rep",rep,sep ="")]]) <- lapply(c(1:10), function(i){
paste("Fold", i, sep="")}
)
})
}
names.nested.list(train.test.folds)
times <- 5
times <- 5
names(train.test.folds) <-  lapply(c(1:times), function(i){
paste("Rep", i, sep="")}
)
train.test.folds
names.nested.list <- function(data, times = rep){
times <- 5
names(train.test.folds) <-  lapply(c(1:times), function(i){
paste("Rep", i, sep="")}
)
names(train.test.folds) <- lapply(c(1:times), function(rep){
names(train.test.folds[[paste("Rep",rep,sep ="")]]) <- lapply(c(1:10), function(i){
paste("Fold", i, sep="")}
)
})
}
names.nested.list <- function(data, times = rep){
names(train.test.folds) <-  lapply(c(1:times), function(i){
paste("Rep", i, sep="")}
)
names(train.test.folds) <- lapply(c(1:times), function(rep){
names(train.test.folds[[paste("Rep",rep,sep ="")]]) <- lapply(c(1:10), function(i){
paste("Fold", i, sep="")}
)
})
}
names.nested.list(train.test.folds)
train.test.folds
names(train.test.folds) <-  lapply(c(1:times), function(i){
paste("Rep", i, sep="")}
)
train.test.folds
lapply(c(1:times), function(select.rep){
names(train.test.folds[[paste("Rep",select.rep,sep ="")]]) <- lapply(c(1:10), function(i){
paste("Fold", i, sep="")}
)
})
lapply(c(1:times), function(i){
paste("Rep", i, sep="")}
)
lapply(c(1:10), function(i){
paste("Fold", i, sep="")}
)
names(train.test.folds[[paste("Rep",select.rep,sep ="")]])
names(train.test.folds[[paste("Rep",1,sep ="")]]) <- lapply(c(1:10), function(i){
paste("Fold", i, sep="")}
)
train.test.folds[[paste("Rep",1,sep ="")]]
names(train.test.folds)
names(train.test.folds[[paste("Rep",select.rep,sep ="")]]) <- lapply(c(1:10), function(i){
paste("Fold", i, sep="")}
)
lapply(c(1:times), function(select.rep){
names(train.test.folds[[paste("Rep",select.rep,sep ="")]]) <- lapply(c(1:10), function(i){
paste("Fold", i, sep="")}
)
})
names(train.test.folds[[paste("Rep",select.rep,sep ="")]]) <- lapply(c(1:10), function(i){
paste("Fold", i, sep="")}
)
names(train.test.folds[[paste("Rep",1,sep ="")]]) <- lapply(c(1:10), function(i){
paste("Fold", i, sep="")}
)
names(train.test.folds[[paste("Rep",1,sep ="")]])
c(1:times)
lapply(c(1:times), function(select.rep){
names(train.test.folds[[paste("Rep",1,sep ="")]]) <- lapply(c(1:10), function(i){
paste("Fold", i, sep="")}
)
})
names(train.test.folds[[paste("Rep",1,sep ="")]])
lapply(c(1:times), function(select.rep){
names(train.test.folds[[paste("Rep",select.rep,sep ="")]]) <- lapply(c(1:10), function(i){
paste("Fold", i, sep="")}
)
})
names(train.test.folds)
names(train.test.folds$Rep1)
names(train.test.folds$Rep2)
lapply(c(1:10), function(i){
paste("Fold", i, sep="")}
)
names(train.test.folds[[paste("Rep",1,sep ="")]])
names(train.test.folds[[paste("Rep",2,sep ="")]])
names(train.test.folds[[paste("Rep",2,sep ="")]]) <- lapply(c(1:10), function(i){
paste("Fold", i, sep="")}
)
names(train.test.folds[[paste("Rep",2,sep ="")]])
varA = paste0("Rep", 1:rep)
varA
varB = paste0("Fold", 1:10)
varB
lapply(train.test.folds, setNames, varB)
setNames(lapply(train.test.folds, setNames, varB), varA)
train.test.folds <- lapply(c(1:rep), function(split){
ind <- names(fold.train) %>% str_detect(paste("Rep",split, sep =""))
dat <- fold.train[ind]
tmp <- lapply(c(1:length(dat)), function(fold){
list(x.test = x[dat[[fold]],],
x.train = x[-dat[[fold]],],
y.test = y[dat[[fold]]],
y.train = y[-dat[[fold]]]
)
})
})
setNames(lapply(train.test.folds, setNames, varB), varA)
reps <- paste0("Rep", 1:rep)
folds <- paste0("Fold", 1:10)
setNames(lapply(train.test.folds, setNames, folds), reps)
length(train.test.folds)
(train.test.folds
train.test.folds
train.test.folds
train.test.folds$Rep1
train.test.folds
reps <- paste0("Rep", 1:rep)
folds <- paste0("Fold", 1:10)
setNames(lapply(train.test.folds, setNames, folds), reps)
train.test.folds <- setNames(lapply(train.test.folds, setNames, folds), reps)
train.test.folds$Rep1
models <- lapply(1:length(train.test.folds), function(fold){
dat <- train.test.folds$Rep1
calc.model.metrics(dat[[fold]]$x.train, y = dat[[fold]]$y.train, train.method = "glmnet",  tuneGrid = expand.grid(alpha = seq(0,1,0.1), lambda = seq(0.01,0.2,by = 0.01)))
})
dat <- train.test.folds$Rep1
dat
dat <- train.test.folds$Rep1
dat[[1]]$x.train
train.test.folds$Rep1
train.test.folds <- lapply(c(1:rep), function(split){
ind <- names(fold.train) %>% str_detect(paste("Rep",split, sep =""))
dat <- fold.train[ind]
tmp <- lapply(c(1:length(dat)), function(fold){
list(x.test = x[dat[[fold]],],
x.train = x[-dat[[fold]],],
y.test = y[dat[[fold]]],
y.train = y[-dat[[fold]]]
)
})
})
train.test.folds
train.test.folds[[1]]
ind <- names(fold.train) %>% str_detect(paste("Rep",split, sep =""))
dat <- fold.train[ind]
dat
fold.train
fold.train <- createFolds(y, k = 10) # ensure that at least 10 samples are in each fold
fold.train
?createMultiFolds
fold.train <- createFolds(y, k = 10, returnTrain = T) # ensure that at least 10 samples are in each fold
fold.train
fold.train <- createFolds(y, k = 10, returnTrain = F) # ensure that at least 10 samples are in each fold
createMultiFolds(y, k = 10, times = rep, returnTrain = T)
fold.train <- createMultiFolds(y, k = 10, times = rep) # ensure that at least 10 samples are in each fold
fold.train
fold.train$Fold01.Rep1 %>% length()
train.test.folds <- lapply(c(1:rep), function(split){
ind <- names(fold.train) %>% str_detect(paste("Rep",split, sep =""))
dat <- fold.train[ind]
tmp <- lapply(c(1:length(dat)), function(fold){
list(x.test = x[-dat[[fold]],],
x.train = x[dat[[fold]],],
y.test = y[-dat[[fold]]],
y.train = y[dat[[fold]]]
)
})
})
train.test.folds[[1]]
reps <- paste0("Rep", 1:rep)
folds <- paste0("Fold", 1:10)
train.test.folds <- setNames(lapply(train.test.folds, setNames, folds), reps)
train.test.folds$Rep1
models <- lapply(1:length(train.test.folds), function(fold){
dat <- train.test.folds$Rep1
calc.model.metrics(dat[[1]]$x.train, y = dat[[fold]]$y.train, train.method = "glmnet",  tuneGrid = expand.grid(alpha = seq(0,1,0.1), lambda = seq(0.01,0.2,by = 0.01)))
})
dat <- train.test.folds$Rep1
calc.model.metrics(dat[[fold]]$x.train, y = dat[[fold]]$y.train, train.method = "glmnet",  tuneGrid = expand.grid(alpha = seq(0,1,0.1), lambda = seq(0.01,0.2,by = 0.01)))
dat
calc.model.metrics
dat
dat[[1]]$x.train
calc.model.metrics(dat[[1]]$x.train, y = dat[[1]]$y.train, train.method = "glmnet",  tuneGrid = expand.grid(alpha = seq(0,1,0.1), lambda = seq(0.01,0.2,by = 0.01)))
:length(train.test.folds)
length(train.test.folds)
train.test.folds$Rep1
# generate 5 folds for outer loop
set.seed(12)
rep <- 5
k <- 10
train.test.folds <- lapply(c(1:rep), function(split){
ind <- names(fold.train) %>% str_detect(paste("Rep",split, sep =""))
dat <- fold.train[ind]
tmp <- lapply(c(1:length(dat)), function(fold){
list(x.test = x[-dat[[fold]],],
x.train = x[dat[[fold]],],
y.test = y[-dat[[fold]]],
y.train = y[dat[[fold]]]
)
})
})
reps <- paste0("Rep", 1:rep)
folds <- paste0("Fold", 1:k)
train.test.folds <- setNames(lapply(train.test.folds, setNames, folds), reps)
reps
folds
dat
models <- lapply(1:k, function(fold){
dat <- train.test.folds$Rep1
calc.model.metrics(dat[[fold]]$x.train, y = dat[[fold]]$y.train, train.method = "glmnet",  tuneGrid = expand.grid(alpha = seq(0,1,0.1), lambda = seq(0.01,0.2,by = 0.01)))
})
models
df.train <- do.call(rbind.data.frame, sapply(models, '[', 'train.metrics'))
df.test <- do.call(rbind.data.frame, sapply(models, '[', 'test.metrics'))
df.train %>% summarize(mean = mean(ROC), meanSens = mean(Sens, na.rm=T), meanSpec = mean(Spec))
df.test %>% summarize(mean = mean(AUC), meanSens = mean(Sens, na.rm=T), meanSpec = mean(Spec))
fold.train[ind]
fold.train[ind]
models.test <-lapply(c(1:rep), function(split){
ind <- names(fold.train) %>% str_detect(paste("Rep",split, sep =""))
dat <- fold.train[ind]
res <- lapply(c(1:k), function(fold){
calc.model.metrics(dat[[fold]]$x.train, y = dat[[fold]]$y.train, train.method = "glmnet",
tuneGrid = expand.grid(alpha = seq(0,1,0.1), lambda = seq(0.01,0.2,by = 0.01)))
})
return(res)
})
names(fold.train) %>% str_detect(paste("Rep",split, sep =""))
names(train.test.folds)
ind <- names(train.test.folds) %>% str_detect(paste("Rep",split, sep =""))
dat <- train.test.folds[ind]
dat
fold.train
names(fold.train) %>% str_detect(paste("Rep",split, sep =""))
names(train.test.folds) %>% str_detect(paste("Rep",split, sep =""))
ind <- names(train.test.folds) %>% str_detect(paste("Rep",split, sep =""))
dat <- train.test.folds[ind]
dat
dat$Rep1
ind
train.test.folds[ind]
train.test.folds[paste("Rep",split, sep ="")]
train.test.folds[ind]$Rep1
train.test.folds
train.test.folds[paste("Rep",split, sep ="")]
train.test.folds[["Rep1"]]
paste("Rep",split, sep ="")
train.test.folds[[paste("Rep",split, sep ="")]]
train.test.folds[[paste("Rep",split, sep ="")]]
fold.train
models.test <-lapply(c(1:rep), function(split){
# select Data from 1 repeat
dat <- train.test.folds[[paste("Rep",split, sep ="")]]
# apply model to all folds of that 1 repeat and test against the remaining fold not used for training
res <- lapply(c(1:k), function(fold){
calc.model.metrics(dat[[fold]]$x.train, y = dat[[fold]]$y.train, train.method = "glmnet",
tuneGrid = expand.grid(alpha = seq(0,1,0.1), lambda = seq(0.01,0.2,by = 0.01)))
})
return(res)
})
calc.model.metrics
calc.model.metrics.2 <- function(x.train, y.train,train.method = "glmnet", cv.method = "repeatedcv", number = 10, repeats = 5, metric = "ROC", tuneGrid){
# define ctrl function
cctrl1 <- trainControl(method=cv.method, number=number,repeats = repeats, returnResamp="all",
classProbs=TRUE, summaryFunction=twoClassSummary)
# run glmnet model
set.seed(849)
md <- train(x.train, y.train, method = train.method,preProcess = c("center","scale"),
trControl = cctrl1,metric = metric,tuneGrid = tuneGrid)
# train coefs
feat <- coef(md$finalModel, md$finalModel$lambdaOpt)
# obtain index from max metric
opt <- md$results[which(md$results$lambda == md$finalModel$lambdaOpt),]
# predict
pred <- predict(md, x.test, type="raw")
# object to return
res <- list(
coefficients = rownames_to_column(data.frame(vals = feat[feat[,1] != 0, 1][-1]),"coefs"),
train.metrics = opt[which(opt$ROC == max(opt$ROC)),],
test.metrics = data.frame(AUC = auc(roc(y.test, predict(md, x.test, type="prob")[,1])),
Sens = sensitivity(y.test, pred)  ,
Spec = specificity(y.test, pred))
)
return(res)
}
c(1:k)
models.test <-lapply(c(1:rep), function(split){
# select Data from 1 repeat
dat <- train.test.folds[[paste("Rep",split, sep ="")]]
# apply model to all folds of that 1 repeat and test against the remaining fold not used for training
pb = txtProgressBar(min = 0, max = c(1:k), initial = 0)
res <- lapply(c(1:k), function(fold){
calc.model.metrics.2(dat[[fold]]$x.train, y = dat[[fold]]$y.train, train.method = "glmnet",
tuneGrid = expand.grid(alpha = seq(0,1,0.1), lambda = seq(0.01,0.2,by = 0.01)))
setTxtProgressBar(pb,stepi)
})
return(res)
})
models.test <-lapply(c(1:rep), function(split){
# select Data from 1 repeat
dat <- train.test.folds[[paste("Rep",split, sep ="")]]
# apply model to all folds of that 1 repeat and test against the remaining fold not used for training
pb = txtProgressBar(min = 0, max = c(1:k), initial = 0)
res <- lapply(c(1:k), function(fold){
setTxtProgressBar(pb)
calc.model.metrics.2(dat[[fold]]$x.train, y = dat[[fold]]$y.train, train.method = "glmnet",
tuneGrid = expand.grid(alpha = seq(0,1,0.1), lambda = seq(0.01,0.2,by = 0.01)))
})
return(res)
})
pb = txtProgressBar(min = 0, max = c(1:k), initial = 0)
pb = txtProgressBar(min = 0, max = k, initial = 0)
models.test <-lapply(c(1:rep), function(split){
# select Data from 1 repeat
dat <- train.test.folds[[paste("Rep",split, sep ="")]]
# apply model to all folds of that 1 repeat and test against the remaining fold not used for training
pb = txtProgressBar(min = 0, max = k, initial = 0)
res <- lapply(c(1:k), function(fold){
setTxtProgressBar(pb,stepi)
calc.model.metrics.2(dat[[fold]]$x.train, y = dat[[fold]]$y.train, train.method = "glmnet",
tuneGrid = expand.grid(alpha = seq(0,1,0.1), lambda = seq(0.01,0.2,by = 0.01)))
})
return(res)
})
models.test <-lapply(c(1:rep), function(split){
# select Data from 1 repeat
dat <- train.test.folds[[paste("Rep",split, sep ="")]]
# apply model to all folds of that 1 repeat and test against the remaining fold not used for training
pb = txtProgressBar(min = 0, max = k, initial = 0)
res <- lapply(c(1:k), function(fold){
setTxtProgressBar(pb)
calc.model.metrics.2(dat[[fold]]$x.train, y = dat[[fold]]$y.train, train.method = "glmnet",
tuneGrid = expand.grid(alpha = seq(0,1,0.1), lambda = seq(0.01,0.2,by = 0.01)))
})
return(res)
})
models.test <-lapply(c(1:rep), function(split){
# select Data from 1 repeat
dat <- train.test.folds[[paste("Rep",split, sep ="")]]
# apply model to all folds of that 1 repeat and test against the remaining fold not used for training
res <- lapply(c(1:k), function(fold){
progress(fold)
calc.model.metrics.2(dat[[fold]]$x.train, y = dat[[fold]]$y.train, train.method = "glmnet",
tuneGrid = expand.grid(alpha = seq(0,1,0.1), lambda = seq(0.01,0.2,by = 0.01)))
})
return(res)
})
models.test <-lapply(c(1:rep), function(split){
# select Data from 1 repeat
dat <- train.test.folds[[paste("Rep",split, sep ="")]]
# apply model to all folds of that 1 repeat and test against the remaining fold not used for training
res <- lapply(c(1:k), function(fold){
calc.model.metrics.2(dat[[fold]]$x.train, y = dat[[fold]]$y.train, train.method = "glmnet",
tuneGrid = expand.grid(alpha = seq(0,1,0.1), lambda = seq(0.01,0.2,by = 0.01)))
})
return(res)
})
library(pbapply)
models.test <-lapply(c(1:rep), function(split){
# select Data from 1 repeat
dat <- train.test.folds[[paste("Rep",split, sep ="")]]
# apply model to all folds of that 1 repeat and test against the remaining fold not used for training
res <- pblapply(c(1:k), function(fold){
calc.model.metrics.2(dat[[fold]]$x.train, y = dat[[fold]]$y.train, train.method = "glmnet",
tuneGrid = expand.grid(alpha = seq(0,1,0.1), lambda = seq(0.01,0.2,by = 0.01)))
})
return(res)
})
models.test <-pblapply(c(1:rep), function(split){
# select Data from 1 repeat
dat <- train.test.folds[[paste("Rep",split, sep ="")]]
# apply model to all folds of that 1 repeat and test against the remaining fold not used for training
res <- pblapply(c(1:k), function(fold){
calc.model.metrics.2(dat[[fold]]$x.train, y = dat[[fold]]$y.train, train.method = "glmnet",
tuneGrid = expand.grid(alpha = seq(0,1,0.1), lambda = seq(0.01,0.2,by = 0.01)))
})
return(res)
})
models.test
setNames(lapply(models.test, setNames, folds), reps)
models.test <- setNames(lapply(models.test, setNames, folds), reps)
# extract train metrics from list and convert to data.frame
df.train <- do.call(rbind.data.frame, sapply(models.test, '[', 'train.metrics'))
df.test <- do.call(rbind.data.frame, sapply(models.test, '[', 'test.metrics'))
df.train
models.test
lapply(do.call(rbind.data.frame, sapply(models.test, '[', 'train.metrics'))
lapply(1:5, function(split){
do.call(rbind.data.frame, sapply(models.test[[split]], '[', 'train.metrics')) })
models.test[[1]]
do.call(rbind.data.frame, sapply(models.test[[1]], '[', 'train.metrics'))
lapply(1:5, function(split){
do.call(rbind.data.frame, sapply(models.test[[split]], '[', 'train.metrics'))
})
lapply(1:5, function(split){
do.call(rbind.data.frame, sapply(models.test[[split]], '[', 'train.metrics'))
}) summarize(mean = mean(ROC), meanSens = mean(Sens, na.rm=T), meanSpec = mean(Spec))
lapply(1:5, function(split){
do.call(rbind.data.frame, sapply(models.test[[split]], '[', 'train.metrics'))
}) %>% summarize(mean = mean(ROC), meanSens = mean(Sens, na.rm=T), meanSpec = mean(Spec))
lapply(1:5, function(split){
do.call(rbind.data.frame, sapply(models.test[[split]], '[', 'train.metrics'))  %>%
summarize(mean = mean(ROC), meanSens = mean(Sens, na.rm=T), meanSpec = mean(Spec))
})
lapply(1:5, function(split){
do.call(rbind.data.frame, sapply(models.test[[split]], '[', 'train.metrics'))
})
lapply(1:5, function(split){
do.call(rbind.data.frame, sapply(models.test[[split]], '[', 'train.metrics'))
}) %>% as.data.frame()
lapply(1:5, function(split){
do.call(rbind.data.frame, sapply(models.test[[split]], '[', 'train.metrics'))
}) %>% rbind.data.frame()
lapply(1:5, function(split){
do.call(rbind.data.frame, sapply(models.test[[split]], '[', 'train.metrics'))
})
a <-lapply(c(1:rep), function(split){
# select Data from 1 repeat
dat <- train.test.folds[[paste("Rep",split, sep ="")]]
message(paste("Starting calculation of Rep", split,"... of", rep))
# apply model to all folds of that 1 repeat and test against the remaining fold not used for training
res <- pblapply(c(1:k), function(fold){
calc.model.metrics.2(dat[[fold]]$x.train, y = dat[[fold]]$y.train, train.method = "glmnet",
tuneGrid = expand.grid(alpha = seq(0,1,0.1), lambda = seq(0.01,0.2,by = 0.01)))
})
return(res)
})
df.test <- lapply(1:5, function(split){
do.call(rbind.data.frame, sapply(models.test[[split]], '[', 'test.metrics'))
})
df.test
lapply(1:5, function(split){
do.call(rbind.data.frame, sapply(models.test[[split]], '[', 'test.metrics')) %>%
summarize(mean = mean(AUC), meanSens = mean(Sens, na.rm=T), meanSpec = mean(Spec))
})
df.train <- lapply(1:5, function(split){
do.call(rbind.data.frame, sapply(models.test[[split]], '[', 'train.metrics')) %>%
summarize(mean = mean(ROC), meanSens = mean(Sens, na.rm=T), meanSpec = mean(Spec))
})
df.train
lapply(1:5, function(split){
do.call(rbind.data.frame, sapply(models.test[[split]], '[', 'test.metrics')) %>%
summarize(mean = mean(AUC), meanSens = mean(Sens, na.rm=T), meanSpec = mean(Spec))
})
calc.model.metrics.2
lapply(1:5, function(split){
do.call(rbind.data.frame, sapply(models.test[[split]], '[', 'test.metrics'))
do.call(rbind.data.frame, sapply(models.test[[split]], '[', 'test.metrics'))
do.call(rbind.data.frame, sapply(models.test[[split]], '[', 'test.metrics'))
do.call(rbind.data.frame, sapply(models.test[[split]], '[', 'test.metrics'))
models.test[[split]], '[', 'test.metrics')) %>%
summarize(mean = mean(AUC), meanSens = mean(Sens, na.rm=T), meanSpec = mean(Spec))
df.test <- lapply(1:rep, function(split){
do.call(rbind.data.frame, sapply(models.test[[split]], '[', 'test.metrics')) #%>%
#summarize(mean = mean(AUC), meanSens = mean(Sens, na.rm=T), meanSpec = mean(Spec))
})
df.test
train.test.folds
df.train
df.test <- lapply(1:rep, function(split){
do.call(rbind.data.frame, sapply(models.test[[split]], '[', 'test.metrics')) #%>%
#summarize(mean = mean(AUC), meanSens = mean(Sens, na.rm=T), meanSpec = mean(Spec))
})
df.test
df.test <- lapply(1:rep, function(split){
do.call(rbind.data.frame, sapply(models.test[[split]], '[', 'test.metrics')) %>%
summarize(mean = mean(AUC), meanSens = mean(Sens, na.rm=T), meanSpec = mean(Spec))
})
df.test
df.train
models.test
lapply(1:rep, function(split){
do.call(rbind.data.frame, sapply(models.test[[split]], '[', 'coefficients'))# %>%
#summarize(mean = mean(ROC), meanSens = mean(Sens, na.rm=T), meanSpec = mean(Spec))
})
models.test$Rep1
models.eNet <- models.test
models.lasso <-lapply(c(1:rep), function(split){
# select Data from 1 repeat
dat <- train.test.folds[[paste("Rep",split, sep ="")]]
message(paste("Starting calculation of Rep", split,"... of", rep))
# apply model to all folds of that 1 repeat and test against the remaining fold not used for training
res <- pblapply(c(1:k), function(fold){
calc.model.metrics.2(dat[[fold]]$x.train, y = dat[[fold]]$y.train, train.method = "glmnet",
tuneGrid = expand.grid(alpha = 1, lambda = seq(0.01,0.2,by = 0.01)))
})
return(res)
})
models.lasso
models.test <- models.lasso
models.test <- setNames(lapply(models.test, setNames, folds), reps)
df.train <- lapply(1:rep, function(split){
do.call(rbind.data.frame, sapply(models.test[[split]], '[', 'train.metrics')) %>%
summarize(mean = mean(ROC), meanSens = mean(Sens, na.rm=T), meanSpec = mean(Spec))
})
df.train
df.test <- lapply(1:rep, function(split){
do.call(rbind.data.frame, sapply(models.test[[split]], '[', 'test.metrics')) %>%
summarize(mean = mean(AUC), meanSens = mean(Sens, na.rm=T), meanSpec = mean(Spec))
})
df.test
models.test <- models.eNet
