# define labels for the table
label(dat_table1$Alter)      <- "Age (years)"
label(dat_table1$BRAF)      <- "BRAF-status"
label(dat_table1$Stadium)  <- "AJCC stage" # add Stadium to source table
label(dat_table1$therapy_at_blood_draw) <- "Therapy at blood draw"
label(dat_table1$sex)  <- "Sex"
label(dat_table1$Responder)  <- "Immunotherapy response"
label(dat_table1$ECOG)      <- "ECOG"
label(dat_table1$breslow_thickness_mm)      <- "Breslow thickness (mm)" # change to double
label(dat_table1$subtype) <- "Subtype"
label(dat_table1$localization) <- "Localization"
label(dat_table1$brainMet) <- "Brain metastasis"
label(dat_table1$miRExpAssess) <- "miRNA expression measured"
label(dat_table1$adjuvant_IFN) <- "Received adjuvant IFN treatment"
label(dat_table1$prior_BRAF_therapy) <- "Received prior anti-BRAF therapy"
# function to display p-values
rndr <- function(x, name, ...) {
if (length(x) == 0) {
y <- dat_table1[[name]]
ind <- !is.na(y)
y <- y[ind]
s <- rep("", length(render.default(x=y, name=name, ...)))
if (is.numeric(y)) {
p <- t.test(y ~ dat_table1$Responder[ind])$p.value
} else {
p <- chisq.test(table(y, droplevels(dat_table1$Responder[ind])))$p.value
}
s[2] <- sub("<", "&lt;", format.pval(p, digits=3, eps=0.001))
s
} else {
render.default(x=x, name=name, ...)
}
}
rndr.strat <- function(label, n, ...) {
ifelse(n==0, label, render.strat.default(label, n, ...))
}
# define text for footnote
fn <- "Statistical test: Unequal variance t-test (welch's t-test) for numerical data and chiÂ² test for categorical data. Raw p-values are shown."
table1(~ Alter + BRAF + prior_BRAF_therapy + Stadium + miRExpAssess + adjuvant_IFN + brainMet + sex + ECOG + breslow_thickness_mm + subtype + localization | Responder,
data=dat_table1, droplevels=F, render=rndr, render.strat=rndr.strat, footnote = fn)
dat_miRNA_tidy
dat %>%
# only use data where miRNA data was measured and responder status is known
filter(miRExpAssess == 1 & !is.na(Responder)) %>%
gather(miRNA, expression, contains("hsa")) %>%
mutate(miRNA = str_replace_all(.$miRNA, "hsa-","")) %>%
mutate(log_exp = log2(expression),
Responder =  factor(Responder, levels = c("nein", "ja") , labels = c("no", "yes")))
dat_miRNA_tidy <- dat %>%
# only use data where miRNA data was measured and responder status is known
filter(miRExpAssess == 1 & !is.na(Responder)) %>%
gather(miRNA, expression, contains("hsa")) %>%
mutate(miRNA = str_replace_all(.$miRNA, "hsa-","")) %>%
mutate(log_exp = log2(expression),
Responder =  factor(Responder, levels = c("nein", "ja") , labels = c("no", "yes")))
plot_miRNA <- signif_plot_Melanoma(dat_miRNA_tidy, x="Responder", y="log_exp", signif=0.05, p.adj = "fdr",
plot.type = "dotplot", significance=F, Legend = F, var.equal = F,
method ="t.test", p.label="p = {round(p,4)}",p.size = 3, facet="miRNA")
png("miRNAs.png", units="in", width=5.5, height=4, res=1200)
plot_miRNA$graph
dev.off()
dat_serum_markers_tidy <- dat %>%
select(c(ID, Responder,Baseline, Eosinophile, CRP, LDH, S100)) %>%
gather(serum_marker, value,-c(ID, Responder,Baseline)) %>%
mutate(log_val = ifelse(is.infinite(log2(value)), 0, log2(value)),
Responder =  factor(Responder, levels = c("nein", "ja") , labels = c("no", "yes"))) %>%
filter(!is.na(log_val))
# plot 4 markers in separate plots and calculate statistics
plot_serum_markers <- signif_plot_Melanoma(dat_serum_markers_tidy, x="Responder", y="log_val", p.adj = "fdr",
plot.type = "dotplot", significance=FALSE, Legend = FALSE, ylab = "log2 serum marker concentration",
method ="t.test", p.label="{p.signif}", facet="serum_marker")
# show results of statistical analysis
plot_serum_markers$stat_test_results
# tidy miRNA data.....................................................................................................
dat_miRNA_tidy <- dat %>%
# only use data where miRNA data was measured and responder status is known
filter(miRExpAssess == 1 & !is.na(Responder)) %>%
gather(miRNA, expression, contains("hsa")) %>%
mutate(miRNA = str_replace_all(.$miRNA, "hsa-","")) %>%
mutate(log_exp = log2(expression),
Responder =  factor(Responder, levels = c("nein", "ja") , labels = c("no", "yes")))
# Plot miRNA data
plot_miRNA <- signif_plot_Melanoma(dat_miRNA_tidy, x="Responder", y="log_exp", signif=0.05, p.adj = "fdr",
plot.type = "dotplot", significance=F, Legend = F, var.equal = F,
method ="t.test", p.label="p = {round(p,4)}",p.size = 3, facet="miRNA")
# show results of statistical analysis
plot_miRNA$stat_test_results
xtabs(~ Responder + ECOG, data=dat_fct)
#####################################
##
## 1.Data preprocessing
##
#####################################
# filter data to keep only rows with data for immunotherapy response and miRNA expression and transform categorical variables to factors
dat_fct <- dat %>%
filter(!is.na(Responder)) # n = 81
filter(miRExpAssess == 1) %>% # n = 61
select(-c(TRIM_PDL1_Expression , miRExpAssess, therapy_at_blood_draw)) %>%
mutate( across(c(Responder, Stadium, Baseline, BRAF, ECOG, subtype, localization,
sex, brainMet, adjuvant_IFN, organsInvolved, nras, prior_BRAF_therapy), as.factor))
# load packages "add publications of the respective packages"
# data wrangling
library(tidyverse)
library(data.table)
library(DescTools)
library(pbapply)
library(missForest)
# data visualization
library(ggpubr)
# statistical analysis
library(rstatix)
# summary table
library(table1)
# modelling/machine learning
library(caret)
library(pROC)
library(cvAUC)
# necessary to load data from github with "source_url"
library(devtools)
# load custom written functions
source_url("https://raw.githubusercontent.com/MBender1992/base_scripts/Marc/R_functions.R")
load_melanoma_data <- function(){
require(devtools)
url_miR <- "https://raw.githubusercontent.com/MBender1992/MelanomaStudy/Marc/Data/miRNA_Expression_Fireplex_Melanoma_Study.csv"
url_meta <- "https://raw.githubusercontent.com/MBender1992/MelanomaStudy/Marc/Data/Metadata_Melanoma_Study.csv"
# load csv files
dat_miR   <- read_csv(url(url_miR))
dat_meta  <- read_csv(url(url_meta)) %>%
select(-c(therapy_start, Abnahmedatum)) %>%
mutate(TRIM_PDL1_Expression = str_replace_all(TRIM_PDL1_Expression,"\\++","+")) %>%
mutate(TRIM_PDL1_Expression = ifelse(TRIM_PDL1_Expression == "o", NA,TRIM_PDL1_Expression)) %>%
mutate(Stadium = toupper(Stadium)) %>%
mutate(Stadium = str_extract(Stadium, "^[IV]{1,3}")) %>%
mutate(BRAF = str_replace_all(BRAF, "\\.", "")) %>%
mutate(breslow_thickness_mm = parse_number(breslow_thickness_mm))
# change ID column to uniform capital letters for later filtering
names(dat_miR) <- c("miRNA", toupper(names(dat_miR)[-1]))
# define IDs to be dropped for further analyses
controls <- c("K104_1", "K104_2", "K104_3A", "K104_3B")
duplicates <- c("22B","38B","39B","47B")
# wide miR data (78 patients with miRNA data)
dat_miR_trans <- transpose_dataframe(colnames = c("ID",dat_miR$miRNA), data = dat_miR) %>%
filter(!ID %in% controls & !ID %in% duplicates) %>%   #drop duplicate patient data
mutate(ID = parse_number(ID)) #convert ID to numeric
# join both tables
right_join(dat_miR_trans,dat_meta, by="ID") %>%
filter(!ID %in% c(1,2)) %>% # no data available for patient 1 and 2 but still part of the source table
mutate(miRExpAssess = ifelse(is.na(rowSums(.[,which(str_detect(names(.),"mir"))])), 0,1))  %>%# if no miRNA expression has been measured fill in 0
arrange(ID) %>%
mutate(prior_BRAF_therapy = ifelse(str_detect(Vorbehandlung,"Mek|Dabra|Tafinlar|Tefinlar|MEK|BRAF|Vemu|[zZ]ellboraf"), 1, 0)) %>%
select(-Vorbehandlung)
}
dat <- load_melanoma_data()
dat
#####################################
##
## 1.Data preprocessing
##
#####################################
# filter data to keep only rows with data for immunotherapy response and miRNA expression and transform categorical variables to factors
dat_fct <- dat %>%
filter(!is.na(Responder)) # n = 81
filter(miRExpAssess == 1) %>% # n = 61
select(-c(TRIM_PDL1_Expression , miRExpAssess, therapy_at_blood_draw)) %>%
mutate( across(c(Responder, Stadium, Baseline, BRAF, ECOG, subtype, localization,
sex, brainMet, adjuvant_IFN, organsInvolved, nras, prior_BRAF_therapy), as.factor))
# tidy miRNA data.....................................................................................................
dat_miRNA_tidy <- dat %>%
# only use data where miRNA data was measured and responder status is known
filter(miRExpAssess == 1 & !is.na(Responder)) %>%
gather(miRNA, expression, contains("hsa")) %>%
mutate(miRNA = str_replace_all(.$miRNA, "hsa-","")) %>%
mutate(log_exp = log2(expression),
Responder =  factor(Responder, levels = c("nein", "ja") , labels = c("no", "yes")))
# Plot miRNA data
plot_miRNA <- signif_plot_Melanoma(dat_miRNA_tidy, x="Responder", y="log_exp", signif=0.05, p.adj = "fdr",
plot.type = "dotplot", significance=F, Legend = F, var.equal = F,
method ="t.test", p.label="p = {round(p,4)}",p.size = 3, facet="miRNA")
# show results of statistical analysis
plot_miRNA$stat_test_results
#####################################
##
## 1.Data preprocessing
##
#####################################
# filter data to keep only rows with data for immunotherapy response and miRNA expression and transform categorical variables to factors
dat_fct <- dat %>%
filter(miRExpAssess == 1 & !is.na(Responder))  # n = 61
select(-c(TRIM_PDL1_Expression , miRExpAssess, therapy_at_blood_draw)) %>%
mutate( across(c(Responder, Stadium, Baseline, BRAF, ECOG, subtype, localization,
sex, brainMet, adjuvant_IFN, organsInvolved, nras, prior_BRAF_therapy), as.factor))
dat
#####################################
##
## 1.Data preprocessing
##
#####################################
# filter data to keep only rows with data for immunotherapy response and miRNA expression and transform categorical variables to factors
dat_fct <- dat %>%
filter(miRExpAssess == 1 & !is.na(Responder)) %>% # n = 61
select(-c(TRIM_PDL1_Expression , miRExpAssess, therapy_at_blood_draw)) %>%
mutate( across(c(Responder, Stadium, Baseline, BRAF, ECOG, subtype, localization,
sex, brainMet, adjuvant_IFN, organsInvolved, nras, prior_BRAF_therapy), as.factor))
# check each factor for enough elements when split by responder
xtabs(~ Responder + Stadium, data=dat_fct)
xtabs(~ Responder + BRAF, data=dat_fct)
xtabs(~ Responder + Baseline, data=dat_fct)
xtabs(~ Responder + ECOG, data=dat_fct) # not enough samples in ECOG2
xtabs(~ Responder + subtype, data=dat_fct) # too many groups with few samples
xtabs(~ Responder + localization, data=dat_fct) # too many groups with few samples
xtabs(~ Responder + sex, data=dat_fct)
xtabs(~ Responder + brainMet, data=dat_fct)
xtabs(~ Responder + adjuvant_IFN, data=dat_fct)
xtabs(~ Responder + organsInvolved, data=dat_fct) # too few observations
xtabs(~ Responder + nras, data=dat_fct) # too few observations
xtabs(~ Responder + prior_BRAF_therapy, data=dat_fct)
# remove columns that yield high uncertainty
dat_fct$ECOG <- NULL
dat_fct$subtype <- NULL
dat_fct$localization <- NULL
dat_fct$nras <- NULL
dat_fct$Baseline <- NULL
dat_fct$ID <- NULL
dat_fct$organsInvolved <- NULL
dat_fct$breslow_thickness_mm <- NULL # included in stage variable
dat_fct$BRAF <- NULL # highly correlated with prior BRAF therapy and therefore rather adds noise to the model
# filter data to keep only rows with data for immunotherapy response and miRNA expression and transform categorical variables to factors
dat_fct <- dat %>%
filter(miRExpAssess == 1 & !is.na(Responder)) %>% # n = 61
select(-c(TRIM_PDL1_Expression , miRExpAssess, therapy_at_blood_draw)) %>%
mutate( across(c(Responder, Stadium, Baseline, BRAF, ECOG, subtype, localization,
sex, brainMet, adjuvant_IFN, organsInvolved, nras, prior_BRAF_therapy), as.factor))
# remove columns that yield high uncertainty
dat_fct$ECOG <- NULL
dat_fct$subtype <- NULL
dat_fct$localization <- NULL
dat_fct$nras <- NULL
dat_fct$Baseline <- NULL
dat_fct$ID <- NULL
dat_fct$organsInvolved <- NULL
dat_fct$breslow_thickness_mm <- NULL # included in stage variable
dat_fct$BRAF <- NULL # highly correlated with prior BRAF therapy and therefore rather adds noise to the model
#####################################
##
## 1.Data preprocessing
##
#####################################
# filter data to keep only rows with data for immunotherapy response and miRNA expression and transform categorical variables to factors
dat_fct <- dat %>%
filter(miRExpAssess == 1 & !is.na(Responder)) %>% # n = 61
select(-c(TRIM_PDL1_Expression , miRExpAssess, therapy_at_blood_draw)) %>%
mutate( across(c(Responder, Stadium, Baseline, BRAF, ECOG, subtype, localization,
sex, brainMet, adjuvant_IFN, organsInvolved, nras, prior_BRAF_therapy), as.factor))
# check each factor for enough elements when split by responder
xtabs(~ Responder + Stadium, data=dat_fct)
xtabs(~ Responder + BRAF, data=dat_fct)
xtabs(~ Responder + Baseline, data=dat_fct)
xtabs(~ Responder + ECOG, data=dat_fct) # not enough samples in ECOG2
xtabs(~ Responder + subtype, data=dat_fct) # too many groups with few samples
xtabs(~ Responder + localization, data=dat_fct) # too many groups with few samples
xtabs(~ Responder + sex, data=dat_fct)
xtabs(~ Responder + brainMet, data=dat_fct)
xtabs(~ Responder + adjuvant_IFN, data=dat_fct)
xtabs(~ Responder + organsInvolved, data=dat_fct) # too few observations
xtabs(~ Responder + nras, data=dat_fct) # too few observations
xtabs(~ Responder + prior_BRAF_therapy, data=dat_fct)
# remove columns that yield high uncertainty
dat_fct$ECOG <- NULL
dat_fct$subtype <- NULL
dat_fct$localization <- NULL
dat_fct$nras <- NULL
dat_fct$Baseline <- NULL
dat_fct$ID <- NULL
dat_fct$organsInvolved <- NULL
dat_fct$breslow_thickness_mm <- NULL # included in stage variable
dat_fct$BRAF <- NULL # highly correlated with prior BRAF therapy and therefore rather adds noise to the model
load_melanoma_data <- function(){
require(devtools)
url_miR <- "https://raw.githubusercontent.com/MBender1992/MelanomaStudy/Marc/Data/miRNA_Expression_Fireplex_Melanoma_Study.csv"
url_meta <- "https://raw.githubusercontent.com/MBender1992/MelanomaStudy/Marc/Data/Metadata_Melanoma_Study.csv"
# load csv files
dat_miR   <- read_csv(url(url_miR))
dat_meta  <- read_csv(url(url_meta)) %>%
select(-c(therapy_start, Abnahmedatum)) %>%
mutate(TRIM_PDL1_Expression = str_replace_all(TRIM_PDL1_Expression,"\\++","+")) %>%
mutate(TRIM_PDL1_Expression = ifelse(TRIM_PDL1_Expression == "o", NA,TRIM_PDL1_Expression)) %>%
mutate(Stadium = toupper(Stadium)) %>%
mutate(Stadium = str_extract(Stadium, "^[IV]{1,3}")) %>%
mutate(BRAF = str_replace_all(BRAF, "\\.", "")) %>%
mutate(breslow_thickness_mm = parse_number(breslow_thickness_mm))
# change ID column to uniform capital letters for later filtering
names(dat_miR) <- c("miRNA", toupper(names(dat_miR)[-1]))
# define IDs to be dropped for further analyses
controls <- c("K104_1", "K104_2", "K104_3A", "K104_3B")
duplicates <- c("22B","38B","39B","47B")
# wide miR data (78 patients with miRNA data)
dat_miR_trans <- transpose_dataframe(colnames = c("ID",dat_miR$miRNA), data = dat_miR) %>%
filter(!ID %in% controls & !ID %in% duplicates) %>%   #drop duplicate patient data
mutate(ID = parse_number(ID)) #convert ID to numeric
# join both tables
right_join(dat_miR_trans,dat_meta, by="ID") %>%
filter(!ID %in% c(1,2)) %>% # no data available for patient 1 and 2 but still part of the source table
mutate(miRExpAssess = ifelse(is.na(rowSums(.[,which(str_detect(names(.),"mir"))])), 0,1))  %>%# if no miRNA expression has been measured fill in 0
arrange(ID) %>%
mutate(prior_BRAF_therapy = ifelse(str_detect(Vorbehandlung,"Mek|Dabra|Tafinlar|Tefinlar|MEK|BRAF|Vemu|[zZ]ellboraf"), 1, 0)) %>%
select(-Vorbehandlung)
}
dat <- load_melanoma_data() %>%
mutate(Responder =  factor(Responder, levels = c("nein", "ja") , labels = c("no", "yes")))
dat
dat_table1 <- dat
setDT(dat_table1)
# define which factors to display in table
dat_table1$sex <- factor(dat_table1$sex, levels = c("m", "w") , labels = c("Male", "Female"))
dat_table1$miRExpAssess <- factor(dat_table1$miRExpAssess, levels = c(0, 1) , labels = c("no", "yes"))
dat_table1$Responder <- factor(dat_table1$Responder, levels = c("no", "yes",2) , labels = c("no", "yes","P-value"))
dat_table1$adjuvant_IFN <- factor(dat_table1$adjuvant_IFN, levels = c("nein", "ja") , labels = c("no", "yes"))
dat_table1$brainMet <- factor(dat_table1$brainMet, levels = c("nein", "ja") , labels = c("no", "yes"))
dat_table1$subtype <- factor(dat_table1$subtype, levels = c("cutanes Melanom", "Schleimhautmelanom") , labels = c("cutaneous", "mucosal"))
dat_table1$ECOG <- factor(dat_table1$ECOG, levels = c(0,1,2) , labels = c("0", "1", "2"))
dat_table1$Stadium <- factor(dat_table1$Stadium, levels = c("II", "III","IV") , labels = c("II", "III","IV"))
dat_table1$prior_BRAF_therapy <- factor(dat_table1$prior_BRAF_therapy, levels = c(0, 1) , labels = c("no", "yes"))
# define labels for the table
label(dat_table1$Alter)      <- "Age (years)"
label(dat_table1$BRAF)      <- "BRAF-status"
label(dat_table1$Stadium)  <- "AJCC stage" # add Stadium to source table
label(dat_table1$therapy_at_blood_draw) <- "Therapy at blood draw"
label(dat_table1$sex)  <- "Sex"
label(dat_table1$Responder)  <- "Immunotherapy response"
label(dat_table1$ECOG)      <- "ECOG"
label(dat_table1$breslow_thickness_mm)      <- "Breslow thickness (mm)" # change to double
label(dat_table1$subtype) <- "Subtype"
label(dat_table1$localization) <- "Localization"
label(dat_table1$brainMet) <- "Brain metastasis"
label(dat_table1$miRExpAssess) <- "miRNA expression measured"
label(dat_table1$adjuvant_IFN) <- "Received adjuvant IFN treatment"
label(dat_table1$prior_BRAF_therapy) <- "Received prior anti-BRAF therapy"
# function to display p-values
rndr <- function(x, name, ...) {
if (length(x) == 0) {
y <- dat_table1[[name]]
ind <- !is.na(y)
y <- y[ind]
s <- rep("", length(render.default(x=y, name=name, ...)))
if (is.numeric(y)) {
p <- t.test(y ~ dat_table1$Responder[ind])$p.value
} else {
p <- chisq.test(table(y, droplevels(dat_table1$Responder[ind])))$p.value
}
s[2] <- sub("<", "&lt;", format.pval(p, digits=3, eps=0.001))
s
} else {
render.default(x=x, name=name, ...)
}
}
rndr.strat <- function(label, n, ...) {
ifelse(n==0, label, render.strat.default(label, n, ...))
}
# define text for footnote
fn <- "Statistical test: Unequal variance t-test (welch's t-test) for numerical data and chiÂ² test for categorical data. Raw p-values are shown."
table1(~ Alter + BRAF + prior_BRAF_therapy + Stadium + miRExpAssess + adjuvant_IFN + brainMet + sex + ECOG + breslow_thickness_mm + subtype + localization | Responder,
data=dat_table1, droplevels=F, render=rndr, render.strat=rndr.strat, footnote = fn)
dat_serum_markers_tidy <- dat %>%
select(c(ID, Responder,Baseline, Eosinophile, CRP, LDH, S100)) %>%
gather(serum_marker, value,-c(ID, Responder,Baseline)) %>%
mutate(log_val = ifelse(is.infinite(log2(value)), 0, log2(value))) %>%
filter(!is.na(log_val))
# plot 4 markers in separate plots and calculate statistics
plot_serum_markers <- signif_plot_Melanoma(dat_serum_markers_tidy, x="Responder", y="log_val", p.adj = "fdr",
plot.type = "dotplot", significance=FALSE, Legend = FALSE, ylab = "log2 serum marker concentration",
method ="t.test", p.label="{p.signif}", facet="serum_marker")
# show results of statistical analysis
plot_serum_markers$stat_test_results
#####################################
##
## 1.Data preprocessing
##
#####################################
# filter data to keep only rows with data for immunotherapy response and miRNA expression and transform categorical variables to factors
dat_fct <- dat %>%
filter(miRExpAssess == 1 & !is.na(Responder)) %>% # n = 61
select(-c(TRIM_PDL1_Expression , miRExpAssess, therapy_at_blood_draw)) %>%
mutate( across(c(Responder, Stadium, Baseline, BRAF, ECOG, subtype, localization,
sex, brainMet, adjuvant_IFN, organsInvolved, nras, prior_BRAF_therapy), as.factor))
# check each factor for enough elements when split by responder
xtabs(~ Responder + Stadium, data=dat_fct)
xtabs(~ Responder + BRAF, data=dat_fct)
xtabs(~ Responder + Baseline, data=dat_fct)
xtabs(~ Responder + ECOG, data=dat_fct) # not enough samples in ECOG2
xtabs(~ Responder + subtype, data=dat_fct) # too many groups with few samples
xtabs(~ Responder + localization, data=dat_fct) # too many groups with few samples
xtabs(~ Responder + sex, data=dat_fct)
xtabs(~ Responder + brainMet, data=dat_fct)
xtabs(~ Responder + adjuvant_IFN, data=dat_fct)
xtabs(~ Responder + organsInvolved, data=dat_fct) # too few observations
xtabs(~ Responder + nras, data=dat_fct) # too few observations
xtabs(~ Responder + prior_BRAF_therapy, data=dat_fct)
# remove columns that yield high uncertainty
dat_fct$ECOG <- NULL
dat_fct$subtype <- NULL
dat_fct$localization <- NULL
dat_fct$nras <- NULL
dat_fct$Baseline <- NULL
dat_fct$ID <- NULL
dat_fct$organsInvolved <- NULL
dat_fct$breslow_thickness_mm <- NULL # included in stage variable
dat_fct$BRAF <- NULL # highly correlated with prior BRAF therapy and therefore rather adds noise to the model
dat_miR <- train.EDA %>%
select(contains("mir")) %>%
gather("miRNA", "expression")
# draw histograms for all miRNAs
miR_hist <- dat_miR %>%
ggplot(aes(expression)) +
geom_histogram() +
facet_wrap(~miRNA, scales = "free")
# draw qqplots for all miRNAs
miR_qq <- dat_miR %>%
ggplot(aes(sample = expression)) +
geom_qq() +
geom_qq_line() +
facet_wrap(~miRNA, scales = "free")
miR_hist
miR_hist <- dat_miR %>%
ggplot(aes(expression)) +
geom_histogram(color = "black", fill = "grey") +
facet_wrap(~miRNA, scales = "free") +
theme_bw()
miR_hist
miR_qq <- dat_miR %>%
ggplot(aes(sample = expression)) +
geom_qq() +
geom_qq_line() +
facet_wrap(~miRNA, scales = "free")+
theme_bw()
miR_qq
#####################################
##
##  2. Modeling process
##
#####################################
# define test and training set
set.seed(123)
ind.train <- createDataPartition(dat_fct$Responder, p = 0.7, list = FALSE)
train.EDA  <- dat_fct[ind.train, ] # n = 43
test.EDA <- dat_fct[-ind.train, ] # n = 18
#####################################
##
##  2.a EDA on training set (to avoid drawing conclusions including the test set)
##
#####################################
# change data structure for ggplot
dat_miR <- train.EDA %>%
select(contains("mir")) %>%
gather("miRNA", "expression")
# draw histograms for all miRNAs
miR_hist <- dat_miR %>%
ggplot(aes(expression)) +
geom_histogram(color = "black", fill = "grey") +
facet_wrap(~miRNA, scales = "free") +
theme_bw()
miR_hist
# draw qqplots for all miRNAs
miR_qq <- dat_miR %>%
ggplot(aes(sample = expression)) +
geom_qq() +
geom_qq_line() +
facet_wrap(~miRNA, scales = "free")+
theme_bw()
miR_qq
#####################################
##
##  2. Modeling process
##
#####################################
# define test and training set
set.seed(123)
ind.train <- createDataPartition(dat_fct$Responder, p = 0.7, list = FALSE)
train.EDA  <- dat_fct[ind.train, ] # n = 43
test.EDA <- dat_fct[-ind.train, ] # n = 18
#####################################
##
##  2.a EDA on training set (to avoid drawing conclusions including the test set)
##
#####################################
# change data structure for ggplot
dat_miR <- train.EDA %>%
select(contains("mir")) %>%
gather("miRNA", "expression")
# draw histograms for all miRNAs
miR_hist <- dat_miR %>%
ggplot(aes(expression)) +
geom_histogram(color = "black", fill = "grey") +
facet_wrap(~miRNA, scales = "free") +
theme_bw()
miR_hist
# draw qqplots for all miRNAs
miR_qq <- dat_miR %>%
ggplot(aes(sample = expression)) +
geom_qq() +
geom_qq_line() +
facet_wrap(~miRNA, scales = "free")+
theme_bw()
miR_qq
png("miRNA_histogram.png", units="in", width=10, height=8, res=1200)
miR_hist
dev.off()
png("miRNA_histogram.png", units="in", width=12, height=8, res=1200)
miR_hist
dev.off()
png("miRNA_qq.png", units="in", width=12, height=8, res=1200)
miR_qq
dev.off()
