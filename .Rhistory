mm <- model.matrix(Responder~., data = select(data, c(feat.relaxed$coef,BRAF,Responder)))[,-1]
} else if(model == "relaxedLassomiRNA"){
mm <- model.matrix(Responder~., data = select(data, c(feat.relaxed.miRNA$coef,Responder)))[,-1]
} else {
stop("Please specify 1 of the following 4 options:
1. 'baseline' for a base model using conventional serum markers (LDH, CRP, S100, Eosinophile)
2. 'miRNA' for a model using only miRNAs (reduced by lasso to informative features)
3. 'signif' for a model with significantly different features between responders and non-responders
4. 'complete' for a model with all predictors (reduced by lasso)
5. 'relaxedLasso' for a model with the best predictors selected by the 'complete' model (afterwards reduced again with LASSO)
6. 'relaxedLassomiRNA for a model with the best predictors selected by the 'miRNA' model (afterwards reduced again with LASSO")
}
return(mm)
}
# models a function based on a presepcified model and evaluates training and test test using ROC, Sensitivity and Specificity
lassoEval <- function(model, dat, rep, k, tuneGrid = expand.grid(alpha = 1, lambda = seq(0.01,0.2,by = 0.01))){
# define model matrix with selected features
x <- model.matrix.subset(model, data = dat)
# activate parallel computing
cl <- makeCluster(detectCores(), type='PSOCK')
registerDoParallel(cl)
# generate 10 folds for outer loop
set.seed(12)
fold.train <- createMultiFolds(y, k = k, times = rep) # ensure that at least 10 samples are in each fold
# split data based on these folds (Fold1 means that Fold1 is used for testing)
train.test.folds <- lapply(c(1:rep), function(split){
# select only folds containing the specified repeat in each iteration
if(split == 10){
ind <- names(fold.train) %>% str_detect("Rep10")
dat <- fold.train[ind]
} else {
ind <- names(fold.train) %>% str_detect(paste("Rep0",split, sep =""))
dat <- fold.train[ind]
}
# split data into training and test set with each fold being the test set once
res <- lapply(c(1:k), function(fold){
list(x.test = x[-dat[[fold]],],
x.train = x[dat[[fold]],],
y.test = y[-dat[[fold]]],
y.train = y[dat[[fold]]]
)
})
return(res)
})
# define name of the list elements
reps <<- paste0("Rep", 1:rep)
folds <<- paste0("Fold", 1:k)
train.test.folds <- setNames(lapply(train.test.folds, setNames, folds), reps)
set.seed(849)
lapply(c(1:rep), function(split){
# select Data from 1 repeat
dat <- train.test.folds[[paste("Rep",split, sep ="")]]
# print message to follow progress
message(paste("Starting calculation of Rep", split,"... of", rep))
# apply model to all folds of that 1 repeat and test against the remaining fold not used for training
res <- pblapply(c(1:k), function(fold){
calc.model.metrics.2(x.train = dat[[fold]]$x.train, y.train = dat[[fold]]$y.train, x.test =dat[[fold]]$x.test,
y.test = dat[[fold]]$y.test, train.method = "glmnet",
tuneGrid = tuneGrid)
})
})
}
# convert metrics from training data list to dataframe
unlist.model <- function(dat,metric, element){
ls <- lapply(1:rep, function(split){
do.call(rbind.data.frame, sapply(dat[[split]], '[', element))
})
unlist(sapply(ls, "[", metric))
}
# extract coefficients from model list
extractCoefs <- function(data){
lapply(1:10, function(x){
tmp <- sapply(sapply(data[[x]], '[', 'coefficients'), '[', 'coefs') %>% unlist()
data.frame(coef = tmp)
})
}
# construct confidence interval of a vector x
construct.ci <- function(x){
avg <- mean(x)
moe <- confInt(x)
data.frame(mean = avg,
lower = avg - moe,
upper = avg + moe)
}
#
rbind.model.ci <- function(model){
rbind(train.inner = data.frame(mean = mean(unlist.model(model, "cvAUC", "train.cv")),
lower = mean(unlist.model(model, "lower", "train.cv")),
upper = mean(unlist.model(model, "upper", "train.cv"))),
train.outer = construct.ci(unlist.model(model, "ROC", "train.metrics")),
test.outer =  construct.ci(unlist.model(model, "AUC", "test.metrics")))
}
library(missForest)
library(tidyverse)
library(devtools)
library(caret)
library(doParallel)
library(pROC)
library(pbapply)
k <- 10
rep <- 10
# models.lasso.complete <- lassoEval("complete", dat_log, rep = rep, k = k)
# saveRDS(models.lasso.complete, "models/models_lasso_complete.rds")
models.lasso.complete <- readRDS("models/models_lasso_complete.rds")
# set names of list elements
models.lasso.complete <- setNames(lapply(models.lasso.complete, setNames, folds), reps)
## confidence interval for the cv.train folds in the inner loop
ci.complete <- rbind.model.ci(models.lasso.complete)
# extract important coefficients
extract.coefs.complete <- extractCoefs(models.lasso.complete) %>% do.call(rbind,.) %>% table()
# calculate percentages
feat.freq.complete <- data.frame(sort(extract.coefs.complete/100)) %>%
setNames(c("coef", "freq"))
# plot important features
# ggplot(data = feat.freq.complete, aes(coef, freq, fill = ifelse(freq > 0.5, "red", "blue"))) +
#   geom_bar(stat = "identity",  color = "black") +
#   coord_flip() +
#   xlab("") +
#   ylab("fraction of cv-models using this feature (relative feature importance)") +
#   theme_bw() +
#   scale_y_continuous(limits = c(0,1), breaks = seq(0,1,0.2), expand = c(0,0), labels = scales::percent_format()) +
#   geom_hline(yintercept = 0.5, lty = 2, color = "red") +
#   scale_fill_manual(labels = c("< 50 %", "> 50 %"), values = c("gray95", "lightblue")) +
#   labs(fill = "frequency")
#####################################
##
## c.1b relaxed LASSO of the complete model
##
#####################################
# obtain features for relaxed LASSO analysis (features with importance > 0.5, BRAF added manually within the function)
feat.relaxed <-  feat.freq.complete[feat.freq.complete$freq > 0.5,]
feat.relaxed <- feat.relaxed[feat.relaxed$coef != "BRAFpos",]
# modelling and evaluation
# models.lasso.relaxedLasso <- lassoEval("relaxedLasso", dat_log, rep = rep, k = k)
# saveRDS(models.lasso.relaxedLasso, "models/models_lasso_relaxedLasso.rds")
models.lasso.relaxedLasso <- readRDS("models/models_lasso_relaxedLasso.rds")
# set names of list elements
models.lasso.relaxedLasso <- setNames(lapply(models.lasso.relaxedLasso, setNames, folds), reps)
## confidence interval for the cv.train folds in the inner loop
ci.relaxedLasso <- rbind.model.ci(models.lasso.relaxedLasso)
# extract important coefficients
extract.coefs.relaxedLasso <- extractCoefs(models.lasso.relaxedLasso) %>% do.call(rbind,.) %>% table()
# calculate percentages
feat.freq <- data.frame(sort(extract.coefs.relaxedLasso/100)) %>%
setNames(c("coef", "freq"))
# plot important features
# ggplot(data = feat.freq, aes(coef, freq)) +
#   geom_bar(stat = "identity",  color = "black", fill = "lightblue") +
#   coord_flip() +
#   xlab("") +
#   ylab("fraction of cv-models using this feature (relative feature importance)") +
#   theme_bw() +
#   scale_y_continuous(limits = c(0,1), breaks = seq(0,1,0.2), expand = c(0,0), labels = scales::percent_format()) +
#   geom_hline(yintercept = 0.5, lty = 2, color = "red")
#####################################
##
## c.2 baseline model
##
#####################################
# model process and evaluation, k and rep define fold and repeats in outer loop
# models.lasso.baseline <- lassoEval("baseline", dat_log, rep = rep, k = k)
# saveRDS(models.lasso.baseline, "models/models_lasso_baseline.rds")
models.lasso.baseline <- readRDS("models/models_lasso_baseline.rds")
# set names of list elements
models.lasso.baseline <- setNames(lapply(models.lasso.baseline, setNames, folds), reps)
## confidence interval for the cv.train folds in the inner loop
ci.baseline <- rbind.model.ci(models.lasso.baseline)
# extract important coefficients
extract.coefs.baseline <- extractCoefs(models.lasso.baseline) %>% do.call(rbind,.) %>% table()
# calculate percentages
feat.freq <- data.frame(sort(extract.coefs.baseline/100)) %>%
setNames(c("coef", "freq"))
# plot important features
# ggplot(data = feat.freq, aes(coef, freq, fill = ifelse(freq > 0.5, "red", "blue"))) +
#   geom_bar(stat = "identity",  color = "black") +
#   coord_flip() +
#   xlab("") +
#   ylab("fraction of cv-models using this feature (relative feature importance)") +
#   theme_bw() +
#   scale_y_continuous(limits = c(0,1), breaks = seq(0,1,0.2), expand = c(0,0), labels = scales::percent_format()) +
#   geom_hline(yintercept = 0.5, lty = 2, color = "red") +
#   scale_fill_manual(labels = c("< 50 %", "> 50 %"), values = c("gray95", "lightblue")) +
#   labs(fill = "frequency")
#####################################
##
## c.3 signif
##
#####################################
#
# models.lasso.signif <- lassoEval("signif", dat_log, rep = rep, k = k)
# saveRDS(models.lasso.signif, "models/models_lasso_signif.rds")
models.lasso.signif <- readRDS("models/models_lasso_signif.rds")
# set names of list elements
models.lasso.signif <- setNames(lapply(models.lasso.signif, setNames, folds), reps)
## confidence interval for the cv.train folds in the inner loop
ci.signif <- rbind.model.ci(models.lasso.signif)
# extract important coefficients
extract.coefs.signif <- extractCoefs(models.lasso.signif) %>% do.call(rbind,.) %>% table()
# calculate percentages
feat.freq <- data.frame(sort(extract.coefs.signif/100)) %>%
setNames(c("coef", "freq"))
# plot important features
# ggplot(data = feat.freq, aes(coef, freq)) +
#   geom_bar(stat = "identity",  color = "black", fill = "lightblue") +
#   coord_flip() +
#   xlab("") +
#   ylab("fraction of cv-models using this feature (relative feature importance)") +
#   theme_bw() +
#   scale_y_continuous(limits = c(0,1), breaks = seq(0,1,0.2), expand = c(0,0), labels = scales::percent_format()) +
#   geom_hline(yintercept = 0.5, lty = 2, color = "red") +
#   labs(fill = "frequency")
#####################################
##
## c.4a miRNA
##
#####################################
#
# models.lasso.miRNA <- lassoEval("miRNA", dat_log, rep = 10, k = 10)
# saveRDS(models.lasso.miRNA, "models/models_lasso_miRNA.rds")
models.lasso.miRNA <- readRDS("models/models_lasso_miRNA.rds")
# set names of list elements
models.lasso.miRNA <- setNames(lapply(models.lasso.miRNA, setNames, folds), reps)
## confidence interval for the cv.train folds in the inner loop
ci.miRNA <- rbind.model.ci(models.lasso.miRNA)
# extract important coefficients
extract.coefs.miRNA <- extractCoefs(models.lasso.miRNA) %>% do.call(rbind,.) %>% table()
# calculate percentages
feat.freq.miRNA <- data.frame(sort(extract.coefs.miRNA/100)) %>%
setNames(c("coef", "freq"))
# plot important features
# ggplot(data = feat.freq.miRNA, aes(coef, freq, fill = ifelse(freq > 0.5, "red", "blue"))) +
#   geom_bar(stat = "identity",  color = "black") +
#   coord_flip() +
#   xlab("") +
#   ylab("fraction of cv-models using this feature (relative feature importance)") +
#   theme_bw() +
#   scale_y_continuous(limits = c(0,1), breaks = seq(0,1,0.2), expand = c(0,0), labels = scales::percent_format()) +
#   geom_hline(yintercept = 0.5, lty = 2, color = "red") +
#   scale_fill_manual(labels = c("< 50 %", "> 50 %"), values = c("gray95", "lightblue")) +
#   labs(fill = "frequency")
#####################################
##
## c.4b relaxed LASSO miRNA
##
#####################################
feat.relaxed.miRNA <-  feat.freq.miRNA[feat.freq.miRNA$freq > 0.5,]
# models.lasso.relaxed.miRNA <- lassoEval("relaxedLassomiRNA", dat_log, rep = 10, k = 10)
#saveRDS(models.lasso.relaxed.miRNA, "models/models_lasso_relaxed_miRNA.rds")
models.lasso.relaxed.miRNA <- readRDS("models/models_lasso_relaxed_miRNA.rds")
# set names of list elements
models.lasso.relaxed.miRNA <- setNames(lapply(models.lasso.relaxed.miRNA, setNames, folds), reps)
## confidence interval for the cv.train folds in the inner loop
ci.relaxed.miRNA <- rbind.model.ci(models.lasso.relaxed.miRNA)
# extract important coefficients
extract.coefs.relaxed.miRNA <- extractCoefs(models.lasso.relaxed.miRNA) %>% do.call(rbind,.) %>% table()
# calculate percentages
feat.freq.relaxed.miRNA <- data.frame(sort(extract.coefs.relaxed.miRNA/100)) %>%
setNames(c("coef", "freq"))
test <- rbind(complete = ci.complete,
relaxedLasso = ci.relaxedLasso,
baseline = ci.baseline,
signif = ci.signif,
miRNA = ci.miRNA,
relaxedmiRNA = ci.relaxed.miRNA) %>%
rownames_to_column("tmp") %>%
separate(tmp,c("model", "results"), extra = "merge") %>%
mutate(model = factor(model),
model = reorder(model, mean))
test
ggplot(test, aes(x=model, y=mean)) +
geom_errorbar(aes(ymin=lower, ymax=upper)) + facet_wrap(~results) + coord_flip() + theme_bw()
ggplot(test, aes(x=model, y=mean)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper)) + facet_wrap(~results) + coord_flip() + theme_bw()
ggplot(test, aes(x=model, y=mean)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2) + facet_wrap(~results) + coord_flip() + theme_bw()
ggplot(test, aes(x=model, y=mean), position = position_dodge(0.5)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2) + facet_wrap(~results) + coord_flip() + theme_bw()
ggplot(test, aes(x=model, y=mean), position = position_dodge(0.3)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2) + facet_wrap(~results) + coord_flip() + theme_bw()
ggplot(test, aes(x=model, y=mean), position = position_dodge(0.3)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2) +
facet_wrap(~results) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))
ggplot(test, aes(x=model, y=mean), position = position_dodge(0.3)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2) +
facet_wrap(~results) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
ggplot(test, aes(x=model, y=mean), position = position_dodge(0.3)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2, color ="skyblue") +
facet_wrap(~results) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
ggplot(test, aes(x=model, y=mean), position = position_dodge(0.3)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2) +
facet_wrap(~results) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
dat_compare <- rbind(complete = ci.complete,
relaxedLasso = ci.relaxedLasso,
baseline = ci.baseline,
signif = ci.signif,
miRNA = ci.miRNA,
relaxedmiRNA = ci.relaxed.miRNA) %>%
rownames_to_column("tmp") %>%
separate(tmp,c("model", "results"), extra = "merge") %>%
mutate(model = factor(model),
model = reorder(model, mean))
dat_compare <- rbind(complete = ci.complete,
relaxedLasso = ci.relaxedLasso,
baseline = ci.baseline,
signif = ci.signif,
miRNA = ci.miRNA,
relaxedmiRNA = ci.relaxed.miRNA) %>%
rownames_to_column("tmp") %>%
separate(tmp,c("model", "results"), extra = "merge") %>%
mutate(model = factor(model),
model = reorder(model, mean))
ggplot(dat_compare, aes(x=model, y=mean), position = position_dodge(0.3)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2) +
facet_wrap(~results) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
dat_compare
ggplot(filter(dat_compare, results != "train.inner"), aes(x=model, y=mean), position = position_dodge(0.3)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2) +
facet_wrap(~results) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
ggplot(filter(dat_compare, results != "train.inner"), aes(x=model, y=mean), position = position_dodge(0.3)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
ggplot(filter(dat_compare, results != "train.inner"), aes(x=model, y=mean, color= results), position = position_dodge(0.3)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
ggplot(filter(dat_compare, results != "train.inner"), aes(x=model, y=mean, color= results), position = position_dodge(0.9)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
ggplot(filter(dat_compare, results != "train.inner"), aes(x=model, y=mean, color= results), position = position_dodge()) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
ggplot(filter(dat_compare, results != "train.inner"), aes(x=model, y=mean, fill= results), position = position_dodge()) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
ggplot(filter(dat_compare, results != "train.inner"), aes(x=model, y=mean, color= results), position = position_dodge()) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
ggplot(filter(dat_compare, results != "train.inner"), aes(x=model, y=mean, color= results)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2,position=position_dodge(.9)) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
ggplot(filter(dat_compare, results != "train.inner"), aes(x=model, y=mean, color= results)) +
geom_point(position=position_dodge(.9)) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2,position=position_dodge(.9)) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
ggplot(filter(dat_compare, results != "train.inner"), aes(x=model, y=mean, color= results)) +
geom_point(position=position_dodge(.5)) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2,position=position_dodge(.5)) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
ggplot(filter(dat_compare, results = "train.inner"), aes(x=model, y=mean)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
filter(dat_compare, results = "train.inner")
dat_compare
ggplot(filter(dat_compare, results == "train.inner"), aes(x=model, y=mean)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
ggplot(filter(dat_compare, results != "train.inner"), aes(x=model, y=mean, color= results)) +
geom_point(position=position_dodge(.5)) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2,position=position_dodge(.5)) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
ggplot(filter(dat_compare, results != "train.inner"), aes(x=model, y=mean, color= results)) +
geom_point(position=position_dodge(.5)) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.2,position=position_dodge(.5)) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
ggplot(filter(dat_compare, results == "train.inner"), aes(x=model, y=mean)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.3) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
# train inner cv ROC
ggplot(filter(dat_compare, results == "train.inner"), aes(x=model, y=mean)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.3, size = 0.2) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
# train inner cv ROC
ggplot(filter(dat_compare, results == "train.inner"), aes(x=model, y=mean)) +
geom_point() +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.3, size = 1) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
# train inner cv ROC
ggplot(filter(dat_compare, results == "train.inner"), aes(x=model, y=mean)) +
geom_point(size = 2) +
geom_errorbar(aes(ymin=lower, ymax=upper), width = 0.3, size = 1) +
coord_flip() +
theme_bw() +
scale_y_continuous(breaks = seq(0.6, 0.9, 0.05))+
ylab("ROC")
models.lasso.relaxed.miRNA
models.lasso.relaxedLasso
models.lasso.complete
test <- function(dat,metric, element){
ls <- lapply(1:rep, function(split){
do.call(rbind.data.frame, sapply(dat[[split]], '[', element))
})
sapply(ls, "[", metric)
}
test(models.lasso.complete, "train.metrics", "ROC")
test <- function(dat,metric, element){
ls <- lapply(1:rep, function(split){
do.call(rbind.data.frame, sapply(dat[[split]], '[', element))
})
sapply(ls, "[", metric)
}
test(models.lasso.complete, "train.metrics", "ROC")
models.lasso.complete[[1]]
do.call(rbind.data.frame, sapply(models.lasso.complete[[1]], '[', "ROC"))
do.call(rbind.data.frame, sapply(models.lasso.complete[[1]], '[', "Fold10"))
test <- function(data){
lapply(1:10, function(x){
tmp <- sapply(sapply(data[[x]], '[', 'train.metrics'), '[', 'ROC') %>% unlist()
data.frame(coef = tmp)
})
}
test(models.lasso.complete)
test <- function(data){
lapply(1:10, function(x){
tmp <- sapply(sapply(data[[x]], '[', 'train.metrics'), '[', 'lambda') %>% unlist()
data.frame(lambda = tmp)
})
}
test(models.lasso.complete)
test(models.lasso.complete) %>% unlist()
test(models.lasso.complete) %>% unlist() %>% mean()
test(models.lasso.relaxedLasso) %>% unlist() %>% mean()
