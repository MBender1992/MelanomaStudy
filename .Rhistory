md2 <- train(x.train, y.train, method = "glmnet", metric = "ROC", tuneGrid = expand.grid(alpha = 1, lambda = seq(0.01,0.2,by = 0.01)), preProcess(c("center", "scale")))
md2 <- train(x.train, y.train, method = "glmnet", metric = "ROC", tuneGrid = expand.grid(alpha = 1, lambda = seq(0.01,0.2,by = 0.01)), preProcess= c("center", "scale"))
cctrl1 <- trainControl(method=cv.method, number=number,repeats = repeats, returnResamp="all",savePredictions = T,
classProbs=TRUE, summaryFunction=twoClassSummary)
md2 <- train(x.train, y.train, method = "glmnet",trControl = cctrl1,  metric = "ROC", tuneGrid = expand.grid(alpha = 1, lambda = seq(0.01,0.2,by = 0.01)), preProcess= c("center", "scale"))
pred <- predict(md2, x.test, type="prob")
pred
obs <- y.test
data.frame(pred = pred$ja, obs = obs)
sensitivity(obs, pred)
pred <- predict(md2, x.test, type="raw")
sensitivity(obs, pred)
specificity(obs,pred)
roc(obs, pred)
pred <- predict(md2, x.test, type="prob")
obs <- y.test
roc(obs, pred)
predict(md2, x.test, type="prob")[,1]
roc(y.test, predict(md2, x.test, type="prob")[,1])
set.seed(23)
md2 <- train(x.train, y.train, method = "glmnet",trControl = cctrl1,  metric = "ROC", tuneGrid = expand.grid(alpha = 1, lambda = seq(0.01,0.2,by = 0.01)), preProcess= c("center", "scale"))
pred <- predict(md2, x.test, type="prob")
obs <- y.test
roc(y.test, predict(md2, x.test, type="prob")[,1])
sensitivity(obs,pred)
pred <- predict(md2, x.test, type="raw")
obs <- y.test
sensitivity(obs,pred)
specificity(obs,pred)
pred
predict(md2, x.test, type="prob")
models.lasso.relaxedLasso.ROC
extractSensSpec <- function(data){
lapply(1:10, function(x){
tmp <- sapply(data[[x]], '[', 'Sens')
})
}
extractSensSpec(models.lasso.relaxedLasso.ROC)
models.lasso.relaxedLasso.ROC
extractSensSpec <- function(data){
lapply(1:10, function(x){
tmp <- sapply(data[[x]], '[', 'test.metric')
})
}
extractSensSpec(models.lasso.relaxedLasso.ROCs)
extractSensSpec(models.lasso.relaxedLasso.ROC)
models.lasso.relaxedLasso.ROC
tmp <- sapply(data[[x]], '[', 'test.metrics')
extractSensSpec <- function(data){
lapply(1:10, function(x){
tmp <- sapply(data[[x]], '[', 'test.metrics')
})
}
extractSensSpec(models.lasso.relaxedLasso.ROC)
bind_rows(extractSensSpec(models.lasso.relaxedLasso.ROC))
extractSensSpec(models.lasso.relaxedLasso.ROC)
test<-extractSensSpec(models.lasso.relaxedLasso.ROC)
sapply(test, "[", "Sens")
sapply(test, "[", "test.metrics")
test
extractSensSpec(models.lasso.relaxedLasso.ROC)
extractSensSpec(models.lasso.relaxedLasso.ROC) %>% unlist()
test<-extractSensSpec(models.lasso.relaxedLasso.ROC) %>% unlist()
names(test)
Sens <- names(test) == test.metrics.Sens
Sens <- names(test) == "test.metrics.Sens"
Sens
test[ind.Sens]
ind.Sens <- names(test) == "test.metrics.Sens"
test[ind.Sens]
ind.Spec <- names(test) == "test.metrics.Spec"
test[ind.Spec]
data.frame(TPR = Sens,
FPR = 1-Spec)
ind.Sens <- names(test) == "test.metrics.Sens"
Sens <- test[ind.Sens]
ind.Spec <- names(test) == "test.metrics.Spec"
Spec <- test[ind.Spec]
data.frame(TPR = Sens,
FPR = 1-Spec)
roc <- data.frame(TPR = Sens,
FPR = 1-Spec)
ggplot(roc,aes(FPR,TPR))+geom_line(size = 2, alpha = 0.7)
mean_roc(md2)
install.packages("cutpointr")
library(cutpointr)
mean_roc(md2)
test
pred
pred <- predict(md2, x.test, type="raw")
obs <- y.test
pred
obs
pred <- predict(md2, x.test, type="prob")
obs <- y.test
mean_roc <- function(data, cutoffs = seq(from = 0, to = 1, by = 0.1)) {
map_df(cutoffs, function(cp) {
out <- cutpointr(data = data, x = pred, class = obs,
subgroup = Sample, method = oc_manual, cutpoint = cp,
pos_class = "neg", direction = ">=")
data.frame(cutoff = cp,
sensitivity = mean(out$sensitivity),
specificity = mean(out$specificity))
})
}
mean_roc(md2)
library(missForest)
library(tidyverse)
library(devtools)
library(caret)
library(doParallel)
library(pROC)
library(pbapply)
# source R functions
source_url("https://raw.githubusercontent.com/MBender1992/base_scripts/Marc/R_functions.R")
dat <- load_melanoma_data() %>%
filter(!is.na(Responder))
dat
dat$Vorbehandlung
dat %>%  select(ID, Vorbehandlung)
test <- dat %>%  select(ID, Vorbehandlung)
test %>% mutate(prior_BRAF_therapy = ifelse(str_detect("Mek"), 1, 0))
test %>% mutate(prior_BRAF_therapy = ifelse(str_detect(Vorbehandlung,"Mek"), 1, 0))
test %>% mutate(prior_BRAF_therapy = ifelse(str_detect(Vorbehandlung,"Mek | Dabra | Tafinlar | Tefinlar | MEK | BRAF"), 1, 0))
test %>% mutate(prior_BRAF_therapy = ifelse(str_detect(Vorbehandlung,"Mek | Dabra | Tafinlar | Tefinlar | MEK | BRAF"), 1, 0)) %>%
print(n="all")
test %>% mutate(prior_BRAF_therapy = ifelse(str_detect(Vorbehandlung,"Mek|Dabra|Tafinlar|Tefinlar|MEK|BRAF"), 1, 0)) %>%
print(n="all")
test %>% mutate(prior_BRAF_therapy = ifelse(str_detect(Vorbehandlung,"Mek|Dabra|Tafinlar|Tefinlar|MEK|BRAF|Vemu|[zZ]ellboraf|"), 1, 0)) %>%
print(n="all")
test %>% mutate(prior_BRAF_therapy = ifelse(str_detect(Vorbehandlung,"Mek|Dabra|Tafinlar|Tefinlar|MEK|BRAF|Vemu|[zZ]ellboraf"), 1, 0)) %>%
print(n="all")
dat <- load_melanoma_data() %>%
filter(!is.na(Responder)) %>% # n = 81
mutate(prior_BRAF_therapy = ifelse(str_detect(Vorbehandlung,"Mek|Dabra|Tafinlar|Tefinlar|MEK|BRAF|Vemu|[zZ]ellboraf"), 1, 0)) %>%
select(-Vorbehandlung)
dat$prior_BRAF_therapy
dat$prior_BRAF_therapy %>% sum()
dat$prior_BRAF_therapy %>% sum(na.rm=T)
chisq.test(dat$Responder, dat$prior_BRAF_therapy)
table(dat$Responder, dat$prior_BRAF_therapy)
dat_fct <- dat %>%
filter(miRExpAssess == 1) %>%
select(-c(TRIM_PDL1_Expression , miRExpAssess, therapy_at_blood_draw)) %>%
mutate( across(c(Responder, Stadium, Baseline, BRAF, ECOG, subtype, localization,
sex, Hirnmetastase, adjuvant_IFN, befallen_Organe, nras), as.factor))
load_melanoma_data <- function(){
require(devtools)
url_miR <- "https://raw.githubusercontent.com/MBender1992/MelanomaStudy/Marc/Data/miRNA_Expression_Fireplex_Melanoma_Study.csv"
url_meta <- "https://raw.githubusercontent.com/MBender1992/MelanomaStudy/Marc/Data/Metadata_Melanoma_Study.csv"
# load csv files
dat_miR   <- read_csv(url(url_miR))
dat_meta  <- read_csv(url(url_meta)) %>%
select(-c(therapy_start, Abnahmedatum)) %>%
mutate(TRIM_PDL1_Expression = str_replace_all(TRIM_PDL1_Expression,"\\++","+")) %>%
mutate(TRIM_PDL1_Expression = ifelse(TRIM_PDL1_Expression == "o", NA,TRIM_PDL1_Expression)) %>%
mutate(Stadium = toupper(Stadium)) %>%
mutate(Stadium = str_extract(Stadium, "^[IV]{1,3}")) %>%
mutate(BRAF = str_replace_all(BRAF, "\\.", "")) %>%
mutate(breslow_thickness_mm = parse_number(breslow_thickness_mm))
# change ID column to uniform capital letters for later filtering
names(dat_miR) <- c("miRNA", toupper(names(dat_miR)[-1]))
# define IDs to be dropped for further analyses
controls <- c("K104_1", "K104_2", "K104_3A", "K104_3B")
duplicates <- c("22B","38B","39B","47B")
# wide miR data (78 patients with miRNA data)
dat_miR_trans <- transpose_dataframe(colnames = c("ID",dat_miR$miRNA), data = dat_miR) %>%
filter(!ID %in% controls & !ID %in% duplicates) %>%   #drop duplicate patient data
mutate(ID = parse_number(ID)) #convert ID to numeric
# join both tables
right_join(dat_miR_trans,dat_meta, by="ID") %>%
filter(!ID %in% c(1,2)) %>% # no data available for patient 1 and 2 but still part of the source table
mutate(miRExpAssess = ifelse(is.na(rowSums(.[,which(str_detect(names(.),"mir"))])), 0,1))  %>%# if no miRNA expression has been measure fill in 0
arrange(ID) %>%
mutate(prior_BRAF_therapy = ifelse(str_detect(Vorbehandlung,"Mek|Dabra|Tafinlar|Tefinlar|MEK|BRAF|Vemu|[zZ]ellboraf"), 1, 0)) %>%
select(-Vorbehandlung)
}
dat <- load_melanoma_data() %>%
filter(!is.na(Responder))
# load data with custom function for melanoma data only for Responders
dat <- load_melanoma_data() %>%
filter(!is.na(Responder)) %>% # n = 81
dat$prior_BRAF_therapy
# load data with custom function for melanoma data only for Responders
dat <- load_melanoma_data() %>%
filter(!is.na(Responder)) %>% # n = 81
dat$prior_BRAF_therapy
# load data with custom function for melanoma data only for Responders
dat <- load_melanoma_data() %>%
filter(!is.na(Responder)) %>% # n = 81
dat$prior_BRAF_therapy
dat$prior_BRAF_therapy
dat <- load_melanoma_data() # n = 101 patients
table(dat$Responder, dat$prior_BRAF_therapy)
chisq.test(dat$Responder, dat$prior_BRAF_therapy)
dat_table1 <- dat
setDT(dat_table1)
library(data.table)
library(table1)
dat_table1 <- dat
setDT(dat_table1)
dat_table1$prior_BRAF_therapy <- factor(dat_table1$prior_BRAF_therapy, levels = c(0, 1) , labels = c("no", "yes"))
dat_table1$sex <- factor(dat_table1$sex, levels = c("m", "w") , labels = c("Male", "Female"))
dat_table1$miRExpAssess <- factor(dat_table1$miRExpAssess, levels = c(0, 1) , labels = c("no", "yes"))
dat_table1$Responder <- factor(dat_table1$Responder, levels = c("nein", "ja",2) , labels = c("no", "yes","P-value"))
dat_table1$adjuvant_IFN <- factor(dat_table1$adjuvant_IFN, levels = c("nein", "ja") , labels = c("no", "yes"))
dat_table1$Hirnmetastase <- factor(dat_table1$Hirnmetastase, levels = c("nein", "ja") , labels = c("no", "yes"))
dat_table1$subtype <- factor(dat_table1$subtype, levels = c("cutanes Melanom", "Schleimhautmelanom") , labels = c("cutaneous", "mucosal"))
dat_table1$ECOG <- factor(dat_table1$ECOG, levels = c(0,1,2) , labels = c("0", "1", "2"))
dat_table1$Stadium <- factor(dat_table1$Stadium, levels = c("II", "III","IV") , labels = c("II", "III","IV"))
dat_table1$prior_BRAF_therapy <- factor(dat_table1$prior_BRAF_therapy, levels = c(0, 1) , labels = c("no", "yes"))
# define labels for the table
label(dat_table1$Alter)      <- "Age (years)"
label(dat_table1$BRAF)      <- "BRAF-status"
label(dat_table1$Stadium)  <- "AJCC stage" # add Stadium to source table
label(dat_table1$therapy_at_blood_draw) <- "Therapy at blood draw"
label(dat_table1$sex)  <- "Sex"
label(dat_table1$Responder)  <- "Immunotherapy response"
label(dat_table1$ECOG)      <- "ECOG"
label(dat_table1$breslow_thickness_mm)      <- "Breslow thickness (mm)" # change to double
label(dat_table1$subtype) <- "Subtype"
label(dat_table1$localization) <- "Localization"
label(dat_table1$Hirnmetastase) <- "Brain metastasis"
label(dat_table1$miRExpAssess) <- "miRNA expression measured"
label(dat_table1$adjuvant_IFN) <- "Received adjuvant IFN treatment"
label(dat_table1$prior_BRAF_therapy) <- "Received prior anti-BRAF therapy"
table1(~ Alter + BRAF + Stadium + miRExpAssess + adjuvant_IFN + Hirnmetastase + sex + ECOG + breslow_thickness_mm + subtype + localization + prior_BRAF_therapy | Responder,
data=dat_table1, droplevels=F, render=rndr, render.strat=rndr.strat, footnote = fn)
table1(~ Alter + BRAF + Stadium + miRExpAssess + adjuvant_IFN + Hirnmetastase + sex + ECOG + breslow_thickness_mm + subtype + localization  | Responder,
data=dat_table1, droplevels=F, render=rndr, render.strat=rndr.strat, footnote = fn)
table1(~ Alter + BRAF + Stadium + miRExpAssess + adjuvant_IFN + Hirnmetastase + sex + ECOG + breslow_thickness_mm + subtype + localization + prior_BRAF_therapy | Responder,
data=dat_table1)
dat_table1$prior_BRAF_therapy
dat <- load_melanoma_data()
dat_table1 <- dat
setDT(dat_table1)
dat_table1$prior_BRAF_therapy
factor(dat_table1$prior_BRAF_therapy, levels = c(0, 1) , labels = c("no", "yes"))
dat_table1$prior_BRAF_therapy <- factor(dat_table1$prior_BRAF_therapy, levels = c(0, 1) , labels = c("no", "yes"))
label(dat_table1$prior_BRAF_therapy)
label(dat_table1$Alter)      <- "Age (years)"
label(dat_table1$BRAF)      <- "BRAF-status"
label(dat_table1$Stadium)  <- "AJCC stage" # add Stadium to source table
label(dat_table1$therapy_at_blood_draw) <- "Therapy at blood draw"
label(dat_table1$sex)  <- "Sex"
label(dat_table1$Responder)  <- "Immunotherapy response"
label(dat_table1$ECOG)      <- "ECOG"
label(dat_table1$breslow_thickness_mm)      <- "Breslow thickness (mm)" # change to double
label(dat_table1$subtype) <- "Subtype"
label(dat_table1$localization) <- "Localization"
label(dat_table1$Hirnmetastase) <- "Brain metastasis"
label(dat_table1$miRExpAssess) <- "miRNA expression measured"
label(dat_table1$adjuvant_IFN) <- "Received adjuvant IFN treatment"
label(dat_table1$prior_BRAF_therapy) <- "Received prior anti-BRAF therapy"
fn <- "Statistical test: Unequal variance t-test (welch's t-test) for numerical data and chi² test for categorical data. Raw p-values are shown."
table1(~ Alter + BRAF + Stadium + miRExpAssess + adjuvant_IFN + Hirnmetastase + sex + ECOG + breslow_thickness_mm + subtype + localization + prior_BRAF_therapy | Responder,
data=dat_table1, droplevels=F, render=rndr, render.strat=rndr.strat, footnote = fn)
table1(~ Alter + BRAF + Stadium + miRExpAssess + adjuvant_IFN + Hirnmetastase + sex + ECOG + breslow_thickness_mm + subtype + localization | Responder,
data=dat_table1, droplevels=F, render=rndr, render.strat=rndr.strat, footnote = fn)
dat <- load_melanoma_data() # n = 101 patients
# table(dat$Responder, dat$prior_BRAF_therapy)
# chisq.test(dat$Responder, dat$prior_BRAF_therapy)
#####################################
#                                   #
#         1. patient table          #
#                                   #
#####################################
dat_table1 <- dat
setDT(dat_table1)
# define which factors to display in table
dat_table1$sex <- factor(dat_table1$sex, levels = c("m", "w") , labels = c("Male", "Female"))
dat_table1$miRExpAssess <- factor(dat_table1$miRExpAssess, levels = c(0, 1) , labels = c("no", "yes"))
dat_table1$Responder <- factor(dat_table1$Responder, levels = c("nein", "ja",2) , labels = c("no", "yes","P-value"))
dat_table1$adjuvant_IFN <- factor(dat_table1$adjuvant_IFN, levels = c("nein", "ja") , labels = c("no", "yes"))
dat_table1$Hirnmetastase <- factor(dat_table1$Hirnmetastase, levels = c("nein", "ja") , labels = c("no", "yes"))
dat_table1$subtype <- factor(dat_table1$subtype, levels = c("cutanes Melanom", "Schleimhautmelanom") , labels = c("cutaneous", "mucosal"))
dat_table1$ECOG <- factor(dat_table1$ECOG, levels = c(0,1,2) , labels = c("0", "1", "2"))
dat_table1$Stadium <- factor(dat_table1$Stadium, levels = c("II", "III","IV") , labels = c("II", "III","IV"))
dat_table1$prior_BRAF_therapy <- factor(dat_table1$prior_BRAF_therapy, levels = c(0, 1) , labels = c("no", "yes"))
# define labels for the table
label(dat_table1$Alter)      <- "Age (years)"
label(dat_table1$BRAF)      <- "BRAF-status"
label(dat_table1$Stadium)  <- "AJCC stage" # add Stadium to source table
label(dat_table1$therapy_at_blood_draw) <- "Therapy at blood draw"
label(dat_table1$sex)  <- "Sex"
label(dat_table1$Responder)  <- "Immunotherapy response"
label(dat_table1$ECOG)      <- "ECOG"
label(dat_table1$breslow_thickness_mm)      <- "Breslow thickness (mm)" # change to double
label(dat_table1$subtype) <- "Subtype"
label(dat_table1$localization) <- "Localization"
label(dat_table1$Hirnmetastase) <- "Brain metastasis"
label(dat_table1$miRExpAssess) <- "miRNA expression measured"
label(dat_table1$adjuvant_IFN) <- "Received adjuvant IFN treatment"
label(dat_table1$prior_BRAF_therapy) <- "Received prior anti-BRAF therapy"
# define text for footnote
fn <- "Statistical test: Unequal variance t-test (welch's t-test) for numerical data and chi² test for categorical data. Raw p-values are shown."
table1(~ Alter + BRAF + Stadium + miRExpAssess + adjuvant_IFN + Hirnmetastase + sex + ECOG + breslow_thickness_mm + subtype + localization | Responder,
data=dat_table1, droplevels=F, render=rndr, render.strat=rndr.strat, footnote = fn)
dat <- load_melanoma_data() # n = 101 patients
# table(dat$Responder, dat$prior_BRAF_therapy)
# chisq.test(dat$Responder, dat$prior_BRAF_therapy)
#####################################
#                                   #
#         1. patient table          #
#                                   #
#####################################
dat_table1 <- dat
setDT(dat_table1)
# define which factors to display in table
dat_table1$sex <- factor(dat_table1$sex, levels = c("m", "w") , labels = c("Male", "Female"))
dat_table1$miRExpAssess <- factor(dat_table1$miRExpAssess, levels = c(0, 1) , labels = c("no", "yes"))
dat_table1$Responder <- factor(dat_table1$Responder, levels = c("nein", "ja",2) , labels = c("no", "yes","P-value"))
dat_table1$adjuvant_IFN <- factor(dat_table1$adjuvant_IFN, levels = c("nein", "ja") , labels = c("no", "yes"))
dat_table1$Hirnmetastase <- factor(dat_table1$Hirnmetastase, levels = c("nein", "ja") , labels = c("no", "yes"))
dat_table1$subtype <- factor(dat_table1$subtype, levels = c("cutanes Melanom", "Schleimhautmelanom") , labels = c("cutaneous", "mucosal"))
dat_table1$ECOG <- factor(dat_table1$ECOG, levels = c(0,1,2) , labels = c("0", "1", "2"))
dat_table1$Stadium <- factor(dat_table1$Stadium, levels = c("II", "III","IV") , labels = c("II", "III","IV"))
dat_table1$prior_BRAF_therapy <- factor(dat_table1$prior_BRAF_therapy, levels = c(0, 1) , labels = c("no", "yes"))
# define labels for the table
label(dat_table1$Alter)      <- "Age (years)"
label(dat_table1$BRAF)      <- "BRAF-status"
label(dat_table1$Stadium)  <- "AJCC stage" # add Stadium to source table
label(dat_table1$therapy_at_blood_draw) <- "Therapy at blood draw"
label(dat_table1$sex)  <- "Sex"
label(dat_table1$Responder)  <- "Immunotherapy response"
label(dat_table1$ECOG)      <- "ECOG"
label(dat_table1$breslow_thickness_mm)      <- "Breslow thickness (mm)" # change to double
label(dat_table1$subtype) <- "Subtype"
label(dat_table1$localization) <- "Localization"
label(dat_table1$Hirnmetastase) <- "Brain metastasis"
label(dat_table1$miRExpAssess) <- "miRNA expression measured"
label(dat_table1$adjuvant_IFN) <- "Received adjuvant IFN treatment"
label(dat_table1$prior_BRAF_therapy) <- "Received prior anti-BRAF therapy"
# define text for footnote
fn <- "Statistical test: Unequal variance t-test (welch's t-test) for numerical data and chi² test for categorical data. Raw p-values are shown."
table1(~ Alter + BRAF + Stadium + miRExpAssess + adjuvant_IFN + Hirnmetastase + sex + ECOG + breslow_thickness_mm + subtype + localization + prior_BRAF_therapy| Responder,
data=dat_table1, droplevels=F, render=rndr, render.strat=rndr.strat, footnote = fn)
table1(~ Alter + BRAF + prior_BRAF_therapy + Stadium + miRExpAssess + adjuvant_IFN + Hirnmetastase + sex + ECOG + breslow_thickness_mm + subtype + localization | Responder,
data=dat_table1, droplevels=F, render=rndr, render.strat=rndr.strat, footnote = fn)
dat <- load_melanoma_data() %>%
filter(!is.na(Responder)) # n = 81
dat_fct <- dat %>%
filter(miRExpAssess == 1) %>%
select(-c(TRIM_PDL1_Expression , miRExpAssess, therapy_at_blood_draw)) %>%
mutate( across(c(Responder, Stadium, Baseline, BRAF, ECOG, subtype, localization,
sex, Hirnmetastase, adjuvant_IFN, befallen_Organe, nras, prior_BRAF_therapy), as.factor))
dat_fct$prior_BRAF_therapy
dat_fct$ECOG <- NULL
dat_fct$subtype <- NULL
dat_fct$localization <- NULL
dat_fct$nras <- NULL
dat_fct$Baseline <- NULL
dat_fct$ID <- NULL
NAs <- sapply(dat_fct, function(df){
sum(is.na(df) ==TRUE)/length(df);
})
# remove columns with more than 5 % NAs
dat_fct <- dat_fct[, -which(NAs > 0.05)]
NAs <- sapply(dat_fct, function(df){
sum(is.na(df) ==TRUE)/length(df);
})
NAs
dat_fct <- dat %>%
filter(miRExpAssess == 1) %>%
select(-c(TRIM_PDL1_Expression , miRExpAssess, therapy_at_blood_draw)) %>%
mutate( across(c(Responder, Stadium, Baseline, BRAF, ECOG, subtype, localization,
sex, Hirnmetastase, adjuvant_IFN, befallen_Organe, nras, prior_BRAF_therapy), as.factor))
dat_fct$ECOG <- NULL
dat_fct$subtype <- NULL
dat_fct$localization <- NULL
dat_fct$nras <- NULL
dat_fct$Baseline <- NULL
dat_fct$ID <- NULL
NAs <- sapply(dat_fct, function(df){
sum(is.na(df) ==TRUE)/length(df);
})
NAs
dat_fct$BRAF <- ifelse(dat_fct$BRAF == "pos", 1, 0)
dat_fct$Stadium <- ifelse(dat_fct$Stadium == "II", 2,ifelse(dat_fct$Stadium == "III", 3, 4))
dat_fct
dat_fct <- dat_fct[, -which(NAs > 0.2)]
dat_fct
dat_fct[, -which(NAs > 0.05)]
dat_fct[,64:74]
Hirnmetastase
dat_fct$Hirnmetastase
dat <- load_melanoma_data() %>%
filter(!is.na(Responder))
dat$brainMet
dat_fct <- dat %>%
filter(miRExpAssess == 1) %>%
select(-c(TRIM_PDL1_Expression , miRExpAssess, therapy_at_blood_draw)) %>%
mutate( across(c(Responder, Stadium, Baseline, BRAF, ECOG, subtype, localization,
sex, brainMet, adjuvant_IFN, organsInvolved, nras, prior_BRAF_therapy), as.factor))
xtabs(~ Responder + organsInvolved, data=dat_fct)
xtabs(~ Responder + prior_BRAF_therapy, data=dat_fct)
table(dat_fct$prior_BRAF_therapy, dat_fct$Responder)
table(dat$prior_BRAF_therapy, dat$Responder)
dat <- load_melanoma_data() %>%
filter(!is.na(Responder))
table(dat$prior_BRAF_therapy, dat$Responder)
chisq.test(dat$prior_BRAF_therapy, dat$Responder)
chisq.test(dat_fct$prior_BRAF_therapy, dat-fct$Responder)
chisq.test(dat_fct$prior_BRAF_therapy, dat_fct$Responder)
table(dat_fct$prior_BRAF_therapy, dat_fct$Responder)
dat_fct$ECOG <- NULL
dat_fct$subtype <- NULL
dat_fct$localization <- NULL
dat_fct$nras <- NULL
dat_fct$Baseline <- NULL
dat_fct$ID <- NULL
dat_fct$organsInvolved <- NULL
NAs <- sapply(dat_fct, function(df){
sum(is.na(df) ==TRUE)/length(df);
})
NAs
dat_fct <- dat_fct[, -which(NAs > 0.2)]
dat_fct <- dat_fct[, -which(NAs > 0.2)]
dat_fct[,64:74]
dat_fct[,64:73]
dat_fct[,64:72]
dat_fct[,60:72]
ifelse(dat_fct$brainMet == "1", 1, 0)
ifelse(dat_fct$brainMet == 1, 1, 0)
ifelse(dat_fct$brainMet == "ja", 1, 0)
parse_number(dat_fct$prior_BRAF_therapy)
parse_number(as.character(dat_fct$prior_BRAF_therapy))
dat_fct$BRAF <- ifelse(dat_fct$BRAF == "pos", 1, 0)
dat_fct$Stadium <- ifelse(dat_fct$Stadium == "II", 2,ifelse(dat_fct$Stadium == "III", 3, 4))
dat_fct$sex <- ifelse(dat_fct$sex == "m", 1, 0)
dat_fct$brainMet <- ifelse(dat_fct$brainMet == "ja", 1, 0)
dat_fct$prior_BRAF_therapy <- parse_number(as.character(dat_fct$prior_BRAF_therapy))
set.seed(25)
dat_imp <- dat_fct %>%
select_if(is.numeric) %>%
as.data.frame() %>%
missForest() %>%
.$ximp
dat_imp
getOption("max.print")
dat_imp %>% as_tibble() %>% print(n="all")
options(max.print=1000000)
dat_imp
set.seed(25)
dat_imp <- dat_fct %>%
select_if(is.numeric) %>%
as.data.frame() %>%
missForest() %>%
.$ximp %>%
# replace calculated probabilities by the factor
mutate(BRAF = ifelse(BRAF > 0.5, 1,0),
Stadium = round(Stadium),
Alter = round(Alter),
brainMet = ifelse(brainMet > 0.5, 1,0),
prior_BRAF_therapy = ifelse(prior_BRAF_therapy > 0.5, 1, 0))
dat_imp$BRAF <- factor(dat_imp$BRAF, levels = c(0,1), labels = c("neg", "pos"))
dat_imp$Stadium <- factor(dat_imp$Stadium, levels = c(2,3,4), labels = c("II", "III", "IV"))
dat_fct$sex <- factor(dat_imp$sex, levels = c(0,1), labels = c("w", "m"))
dat_fct$brainMet <- factor(dat_imp$brainMet, levels = c(0,1), labels = c("no", "yes"))
dat_fct$prior_BRAF_therapy  <- factor(dat_imp$prior_BRAF_therapy, levels = c(0,1), labels = c("no", "yes"))
dat_fct <- dat %>%
filter(miRExpAssess == 1) %>%
select(-c(TRIM_PDL1_Expression , miRExpAssess, therapy_at_blood_draw)) %>%
mutate( across(c(Responder, Stadium, Baseline, BRAF, ECOG, subtype, localization,
sex, brainMet, adjuvant_IFN, organsInvolved, nras, prior_BRAF_therapy), as.factor))
dat_fct$ECOG <- NULL
dat_fct$subtype <- NULL
dat_fct$localization <- NULL
dat_fct$nras <- NULL
dat_fct$Baseline <- NULL
dat_fct$ID <- NULL
dat_fct$organsInvolved <- NULL
dat_fct$breslow_thickness_mm <- NULL # included in stage de
NAs <- sapply(dat_fct, function(df){
sum(is.na(df) ==TRUE)/length(df);
})
# remove columns with more than 20 % NAs
dat_fct <- dat_fct[, -which(NAs > 0.2)]
# convert factor columns to numerical
dat_fct$BRAF <- ifelse(dat_fct$BRAF == "pos", 1, 0)
dat_fct$Stadium <- ifelse(dat_fct$Stadium == "II", 2,ifelse(dat_fct$Stadium == "III", 3, 4))
dat_fct$sex <- ifelse(dat_fct$sex == "m", 1, 0)
dat_fct$brainMet <- ifelse(dat_fct$brainMet == "ja", 1, 0)
dat_fct$prior_BRAF_therapy <- parse_number(as.character(dat_fct$prior_BRAF_therapy))
# impute missing values with random forest algorithm
set.seed(25)
dat_imp <- dat_fct %>%
select_if(is.numeric) %>%
as.data.frame() %>%
missForest() %>%
.$ximp %>%
# replace calculated probabilities by the factor
mutate(BRAF = ifelse(BRAF > 0.5, 1,0),
Stadium = round(Stadium),
Alter = round(Alter),
brainMet = ifelse(brainMet > 0.5, 1,0),
prior_BRAF_therapy = ifelse(prior_BRAF_therapy > 0.5, 1, 0))
# replace numerical values by factor for encoding later
dat_imp$BRAF <- factor(dat_imp$BRAF, levels = c(0,1), labels = c("neg", "pos"))
dat_imp$Stadium <- factor(dat_imp$Stadium, levels = c(2,3,4), labels = c("II", "III", "IV"))
dat_imp$sex <- factor(dat_imp$sex, levels = c(0,1), labels = c("w", "m"))
dat_imp$brainMet <- factor(dat_imp$brainMet, levels = c(0,1), labels = c("no", "yes"))
dat_imp$prior_BRAF_therapy  <- factor(dat_imp$prior_BRAF_therapy, levels = c(0,1), labels = c("no", "yes"))
dat_fct$BRAF <- dat_imp$BRAF
dat_fct$Stadium <- dat_imp$Stadium
dat_fct$S100 <- dat_imp$S100
dat_fct$Alter<- dat_imp$Alter
dat_fct$brainMet <- dat_imp$brainMet
dat_fct$prior_BRAF_therapy <- dat_imp$dat_fct$prior_BRAF_therapy
dat_fct$sex <- dat_imp$sex
dat_fct
View(dat_fct)
