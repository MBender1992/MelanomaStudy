read_csv("Data/Metadata_Melanoma_Study.csv")
library(readxl)
library(missForest)
library(tidyverse)
library(devtools)
library(caret)
# source R functions
source_url("https://raw.githubusercontent.com/MBender1992/base_scripts/Marc/R_functions.R")
read_csv("Data/Metadata_Melanoma_Study.csv")
library(tidyverse)
library(ggpubr)
library(rstatix)
library(devtools)
library(data.table)
library(table1)
source_url("https://raw.githubusercontent.com/MBender1992/base_scripts/Marc/R_functions.R")
# load data with custom function for melanoma data only for Responders
dat <- load_melanoma_data() # n = 101 patients
dat_table1 <- dat
setDT(dat_table1)
# define which factors to display in table
dat_table1$sex <- factor(dat_table1$sex, levels = c("m", "w") , labels = c("Male", "Female"))
dat_table1$miRExpAssess <- factor(dat_table1$miRExpAssess, levels = c(0, 1) , labels = c("no", "yes"))
dat_table1$Responder <- factor(dat_table1$Responder, levels = c("nein", "ja",2) , labels = c("no", "yes","P-value"))
dat_table1$adjuvant_IFN <- factor(dat_table1$adjuvant_IFN, levels = c("nein", "ja") , labels = c("no", "yes"))
dat_table1$Hirnmetastase <- factor(dat_table1$Hirnmetastase, levels = c("nein", "ja") , labels = c("no", "yes"))
dat_table1$subtype <- factor(dat_table1$subtype, levels = c("cutanes Melanom", "Schleimhautmelanom") , labels = c("cutaneous", "mucosal"))
dat_table1$ECOG <- factor(dat_table1$ECOG, levels = c(0,1,2) , labels = c("0", "1", "2"))
dat_table1$Stadium <- factor(dat_table1$Stadium, levels = c("II", "III","IV") , labels = c("II", "III","IV"))
# define labels for the table
label(dat_table1$Alter)      <- "Age (years)"
label(dat_table1$BRAF)      <- "BRAF-status"
label(dat_table1$Stadium)  <- "AJCC stage" # add Stadium to source table
label(dat_table1$therapy_at_blood_draw) <- "Therapy at blood draw"
label(dat_table1$sex)  <- "Sex"
label(dat_table1$Responder)  <- "Immunotherapy response"
label(dat_table1$ECOG)      <- "ECOG"
label(dat_table1$breslow_thickness_mm)      <- "Breslow thickness (mm)" # change to double
label(dat_table1$subtype) <- "Subtype"
label(dat_table1$localization) <- "Localization"
label(dat_table1$Hirnmetastase) <- "Brain metastasis"
label(dat_table1$miRExpAssess) <- "miRNA expression measured"
label(dat_table1$adjuvant_IFN) <- "Received adjuvant IFN treatment"
# function to display p-values
rndr <- function(x, name, ...) {
if (length(x) == 0) {
y <- dat_table1[[name]]
ind <- !is.na(y)
y <- y[ind]
s <- rep("", length(render.default(x=y, name=name, ...)))
if (is.numeric(y)) {
p <- t.test(y ~ dat_table1$Responder[ind])$p.value
} else {
p <- chisq.test(table(y, droplevels(dat_table1$Responder[ind])))$p.value
}
s[2] <- sub("<", "&lt;", format.pval(p, digits=3, eps=0.001))
s
} else {
render.default(x=x, name=name, ...)
}
}
rndr.strat <- function(label, n, ...) {
ifelse(n==0, label, render.strat.default(label, n, ...))
}
# define text for footnote
fn <- "Statistical test: Unequal variance t-test (welch's t-test) for numerical data and chi? test for categorical data. Raw p-values are shown."
table1(~ Alter + BRAF + Stadium + miRExpAssess + adjuvant_IFN + Hirnmetastase + sex + ECOG + breslow_thickness_mm + subtype + localization | Responder,
data=dat_table1, droplevels=F, render=rndr, render.strat=rndr.strat, footnote = fn)
# change data structure for easier statistical comparison
dat_serum_markers_tidy <- dat %>%
select(c(ID, Responder,Baseline, Eosinophile, CRP, LDH, S100)) %>%
gather(serum_marker, value,-c(ID, Responder,Baseline)) %>%
mutate(log_val = ifelse(is.infinite(log2(value)), 0, log2(value)),
Responder =  factor(Responder, levels = c("nein", "ja") , labels = c("no", "yes"))) %>%
filter(!is.na(log_val))
# plot 4 markers in separate plots and calculate statistics
plot_serum_markers <- signif_plot_Melanoma(dat_serum_markers_tidy, x="Responder", y="log_val", p.adj = "fdr",
plot.type = "dotplot", significance=FALSE, Legend = FALSE, ylab = "log2 serum marker concentration",
method ="t.test", p.label="{p.signif}", facet="serum_marker")
plot_serum_markers
dat_miRNA_tidy <- dat %>%
# only use data where miRNA data was measured
filter(miRExpAssess == 1) %>%
gather(miRNA, expression, contains("hsa")) %>%
mutate(miRNA = str_replace_all(.$miRNA, "hsa-","")) %>%
mutate(log_exp = log2(expression))
# Plot miRNA data
plot_miRNA <- signif_plot_Melanoma(dat_miRNA_tidy, x="Responder", y="log_exp", signif=0.05, p.adj = "fdr",
plot.type = "dotplot", significance=F, Legend = F, var.equal = F,
method ="t.test", p.label="p = {round(p,4)}",p.size = 3, facet="miRNA")
plot_miRNA
dat_serum_markers_tidy
dat_serum_markers_tidy %>% .$ID %>% unique()
dat_serum_markers_tidy %>% .$ID %>% unique() %>% length()
dat_serum_markers_tidy <- dat %>% filter(!is.na(Responder)) %>%
select(c(ID, Responder,Baseline, Eosinophile, CRP, LDH, S100)) %>%
gather(serum_marker, value,-c(ID, Responder,Baseline)) %>%
mutate(log_val = ifelse(is.infinite(log2(value)), 0, log2(value)),
Responder =  factor(Responder, levels = c("nein", "ja") , labels = c("no", "yes"))) %>%
filter(!is.na(log_val))
lot_serum_markers <- signif_plot_Melanoma(dat_serum_markers_tidy, x="Responder", y="log_val", p.adj = "fdr",
plot.type = "dotplot", significance=FALSE, Legend = FALSE, ylab = "log2 serum marker concentration",
method ="t.test", p.label="{p.signif}", facet="serum_marker")
plot_serum_markers <- signif_plot_Melanoma(dat_serum_markers_tidy, x="Responder", y="log_val", p.adj = "fdr",
plot.type = "dotplot", significance=FALSE, Legend = FALSE, ylab = "log2 serum marker concentration",
method ="t.test", p.label="{p.signif}", facet="serum_marker")
plot_serum_markers
dat_serum_markers_tidy <- dat %>% #filter(!is.na(Responder)) %>%
select(c(ID, Responder,Baseline, Eosinophile, CRP, LDH, S100)) %>%
gather(serum_marker, value,-c(ID, Responder,Baseline)) %>%
mutate(log_val = ifelse(is.infinite(log2(value)), 0, log2(value)),
Responder =  factor(Responder, levels = c("nein", "ja") , labels = c("no", "yes"))) %>%
filter(!is.na(log_val))
# plot 4 markers in separate plots and calculate statistics
plot_serum_markers <- signif_plot_Melanoma(dat_serum_markers_tidy, x="Responder", y="log_val", p.adj = "fdr",
plot.type = "dotplot", significance=FALSE, Legend = FALSE, ylab = "log2 serum marker concentration",
method ="t.test", p.label="{p.signif}", facet="serum_marker")
plot_serum_markers
dat_serum_markers_tidy <- dat %>% filter(!is.na(Responder)) %>%
select(c(ID, Responder,Baseline, Eosinophile, CRP, LDH, S100)) %>%
gather(serum_marker, value,-c(ID, Responder,Baseline)) %>%
mutate(log_val = ifelse(is.infinite(log2(value)), 0, log2(value)),
Responder =  factor(Responder, levels = c("nein", "ja") , labels = c("no", "yes"))) %>%
filter(!is.na(log_val))
load("Z:/Aktuell/Eigene Dateien/Eigene Dateien_Marc/R/Github/MelanomaStudy/.RData")
dat_fct
source_url("https://raw.githubusercontent.com/MBender1992/base_scripts/Marc/R_functions.R")
library(missForest)
library(tidyverse)
library(devtools)
library(caret)
source_url("https://raw.githubusercontent.com/MBender1992/base_scripts/Marc/R_functions.R")
#####################################
##
## 1.Data loading and preprocessing
##
#####################################
# load data with custom function for melanoma data only for Responders
dat <- load_melanoma_data() %>%
filter(!is.na(Responder)) # n = 81
dat_fct <- dat %>%
filter(miRExpAssess == 1) %>%
select(-c(TRIM_PDL1_Expression , miRExpAssess, therapy_at_blood_draw)) %>%
mutate( across(c(Responder, Stadium, Baseline, BRAF, ECOG, subtype, localization,
sex, Hirnmetastase, adjuvant_IFN, befallen_Organe, nras), as.factor))
# remove columns that yield high uncertainty
dat_fct$ECOG <- NULL
dat_fct$subtype <- NULL
dat_fct$localization <- NULL
dat_fct$nras <- NULL
dat_fct$Baseline <- NULL
#####################################
##
## 1.a Imputation of missing values
##
#####################################
# detect percentage of NAs in each column
NAs <- sapply(dat_fct, function(df){
sum(is.na(df) ==TRUE)/length(df);
})
# remove columns with more than 5 % NAs
dat_fct <- dat_fct[, -which(NAs > 0.05)]
# convert factor columns to numerical
dat_fct$BRAF <- ifelse(dat_fct$BRAF == "pos", 1, 0)
dat_fct$Stadium <- ifelse(dat_fct$Stadium == "II", 2,ifelse(dat_fct$Stadium == "III", 3, 4))
# impute missing values with random forest algorithm
set.seed(25)
dat_imp <- dat_fct %>%
select_if(is.numeric) %>%
as.data.frame() %>%
missForest() %>%
.$ximp %>%
# replace calculated probabilities by the factor
mutate(BRAF = ifelse(BRAF > 0.5, 1,0),
Stadium = round(Stadium))
# replace numerical values by factor for encoding later
dat_imp$BRAF <- factor(dat_imp$BRAF, levels = c(0,1), labels = c("neg", "pos"))
dat_imp$Stadium <- factor(dat_imp$Stadium, levels = c(2,3,4), labels = c("II", "III", "IV"))
# replacing NAs with imputed values
dat_fct$BRAF <- dat_imp$BRAF
dat_fct$Stadium <- dat_imp$Stadium
dat_fct$S100 <- dat_imp$S100
set.seed(123)
ind.train <- createDataPartition(dat_fct$Responder, p = 0.7, list = FALSE)
train.data  <- dat_fct[ind.train, ] # n = 43
test.data <- dat_fct[-ind.train, ] # n = 18
par(mfrow = c(2,4))
par(mar=c(0.5, 4.5, 0.5, 0.5))
# original expression values
hist(train.data$LDH)
hist(train.data$Eosinophile)
hist(train.data$S100)
hist(train.data$CRP)
# log-transformed expression values
hist(log(train.data$LDH))
hist(log(train.data$Eosinophile))
hist(log(train.data$S100))
hist(log(train.data$CRP))
dmy
dmy <- model.matrix(as.formula(paste("Responder ~.")),data=train.data)
dmy <- dmy[,-1] # remove intercept
dmy
train.data
